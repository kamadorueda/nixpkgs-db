{"version":3,"sources":["components/ProgressBar.jsx","constants.jsx","hooks/fetch.jsx","views/Search.jsx","index.js"],"names":["ProgressBar","props","animated","label","now","Math","random","variant","stripped","DATA_SOURCE","NIXPKGS_SOURCE","useFetchJSON","url","defaultData","useState","data","setData","getAnswer","a","fetch","res","json","useEffect","DEFAULT_PKG_NAME","filterPkgs","pkgs","pkgName","filter","pkg","includes","sort","Pkg","dataSource","values","Object","map","value","meta","rev","arr","revs","floor","length","b","version","sortByVersion","Card","Accordion","Toggle","as","Header","eventKey","last","Row","Col","sm","homepage","href","rel","target","description","undefined","license","fullName","Collapse","Jumbotron","defaultActiveKey","item","itemKey","Body","Text","Container","fluid","Results","page","setPage","setPkgName","matchingPackages","setMatchingPackages","pageStart","min","pageEnd","Fragment","InputGroup","Prepend","id","FormControl","aria-label","aria-describedby","defaultValue","onChange","event","Button","onClick","Pagination","Prev","disabled","Item","Next","Alert","slice","key","Search","Navbar","Brand","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.chunk.js","sourcesContent":["import React from 'react';\nimport { ProgressBar as BootstrapProgressBar } from 'react-bootstrap';\n\nexport const ProgressBar = (props) => (\n  <BootstrapProgressBar\n    animated={true}\n    label={props.label}\n    now={100 * Math.random()}\n    variant={props.variant}\n    stripped={true}\n  />\n)\n","export const DATA_SOURCE = 'https://raw.githubusercontent.com/kamadorueda/nixpkgs-db/latest'\nexport const NIXPKGS_SOURCE = 'https://github.com/NixOS/nixpkgs'\n","import { useEffect, useState } from 'react';\n\nexport const useFetchJSON = (url, defaultData) => {\n  const [data, setData] = useState(defaultData);\n\n  const getAnswer = async () => {\n    const res = await fetch(url);\n    setData(await res.json());\n  };\n\n  useEffect(() => {\n    getAnswer();\n  }, []);\n\n  return data;\n}\n","import React, { useState } from 'react';\nimport {\n  Accordion,\n  Alert,\n  Button,\n  Card,\n  Col,\n  Container,\n  FormControl,\n  InputGroup,\n  Jumbotron,\n  Navbar,\n  Pagination,\n  Row,\n} from 'react-bootstrap';\n\nimport { ProgressBar } from '../components/ProgressBar';\nimport { DATA_SOURCE, NIXPKGS_SOURCE } from '../constants';\nimport { useFetchJSON } from '../hooks/fetch';\n\nconst DEFAULT_PKG_NAME = \"awscli\";\nconst RESULTS_PER_PAGE = 10;\n\nconst filterPkgs = (pkgs, pkgName) => (\n  pkgs.filter((pkg) => pkg.includes(pkgName)).sort()\n);\n\nconst randomChoice = (arr) => (\n  arr[Math.floor(Math.random() * arr.length)]\n);\n\nconst sortByVersion = (data) => {\n  var values = Object.values(data);\n\n  values = values.map((value) => ({\n    meta: value.meta,\n    rev: randomChoice(value.revs),\n  }));\n\n  values.sort((a, b) => a.meta.version < b.meta.version ? 1 : -1);\n\n  return values;\n};\n\nconst Pkg = (props) => {\n  const pkg = props.pkg;\n\n  const dataSource = `${DATA_SOURCE}/data/pkgs/${pkg}.json`;\n  const data = sortByVersion(useFetchJSON(dataSource, {}));\n\n  if (data.length === 0) {\n    return (\n      <Card>\n        <Accordion.Toggle as={Card.Header} variant=\"link\" eventKey={pkg}>\n          <ProgressBar label=\"Loading...\" variant=\"info\" />\n        </Accordion.Toggle>\n      </Card>\n    );\n  } else {\n    const last = data[0];\n\n    return (\n      <Card>\n        <Accordion.Toggle as={Card.Header} variant=\"link\" eventKey={pkg}>\n          <Row>\n            <Col sm={3}>\n              <b>\n                {last.meta.homepage === \"\" ? pkg : (\n                  <a href={last.meta.homepage} rel=\"noopener\" target=\"blank\">\n                    {pkg}\n                  </a>\n                )}\n              </b>\n            </Col>\n            <Col>{last.meta.description}</Col>\n            <Col sm={1}>{data.length}</Col>\n            <Col sm={2}>\n              {last.meta.license?.fullName === undefined\n                ? undefined\n                : last.meta.license.fullName}\n            </Col>\n          </Row>\n        </Accordion.Toggle>\n        <Accordion.Collapse eventKey={pkg}>\n          <Jumbotron>\n            <Accordion defaultActiveKey={`${pkg} v${last.meta.version} @ ${last.rev}`}>\n              {data.map((item) => {\n                const itemKey = `${pkg} v${item.meta.version} @ ${item.rev}`;\n\n                return (\n                  <Card>\n                    <Accordion.Toggle as={Card.Header} variant=\"link\" eventKey={itemKey}>\n                      <a href={dataSource} rel=\"noopener\" target=\"blank\">\n                        <b>{pkg} v{item.meta.version}</b>\n                      </a>\n                    </Accordion.Toggle>\n                    <Accordion.Collapse eventKey={itemKey}>\n                      <Card.Body>\n                        <Card.Text>\n                          <Container fluid>\n                            <Row>\n                              <Col>\n                                <code>\n                                  $ <b>nix-shell</b> -p {pkg} -I nixpkgs={`${NIXPKGS_SOURCE}/archive/${item.rev}.tar.gz`}\n                                </code>\n                              </Col>\n                            </Row>\n                            <Row>\n                              <Col>\n                                <code>\n                                  $ <b>nix-env</b> -i {pkg} -f {`${NIXPKGS_SOURCE}/archive/${item.rev}.tar.gz`}\n                                </code>\n                              </Col>\n                            </Row>\n                          </Container>\n                        </Card.Text>\n                      </Card.Body>\n                    </Accordion.Collapse>\n                  </Card>\n                );\n              })}\n            </Accordion>\n          </Jumbotron>\n        </Accordion.Collapse>\n      </Card>\n    );\n  }\n}\n\nconst Results = (props) => {\n  const pkgs = props.pkgs;\n  const revs = props.revs;\n\n  const [page, setPage] = useState(1);\n  const [pkgName, setPkgName] = useState(DEFAULT_PKG_NAME);\n  const [matchingPackages, setMatchingPackages] = useState(filterPkgs(pkgs, DEFAULT_PKG_NAME));\n\n  const onPkgNameChange = (event) => {\n    setPkgName(event.target.value);\n  };\n\n  const onSearchButtonClick = () => {\n    setPage(1);\n    setMatchingPackages(filterPkgs(pkgs, pkgName));\n  };\n\n  const onPreviousButtonClick = () => {\n    setPage(page - 1);\n  };\n  const onNextButtonClick = () => {\n    setPage(page + 1);\n  };\n\n  const pageStart = Math.min(1 + (page - 1) * RESULTS_PER_PAGE, matchingPackages.length);\n  const pageEnd = Math.min(page * RESULTS_PER_PAGE, matchingPackages.length);\n\n  return (\n    <React.Fragment>\n      <Row>\n        <Col sm={6}>\n          <InputGroup>\n            <InputGroup.Prepend>\n              <InputGroup.Text id=\"pkgName\">Package name</InputGroup.Text>\n            </InputGroup.Prepend>\n            <FormControl\n              aria-label=\"pkgName\"\n              aria-describedby=\"pkgName\"\n              defaultValue={DEFAULT_PKG_NAME}\n              onChange={onPkgNameChange}\n            />\n            <Button onClick={onSearchButtonClick} variant=\"outline-primary\" >\n              Search\n            </Button>\n          </InputGroup>\n        </Col>\n        <Col sm={6}>\n          <Pagination>\n            <Pagination.Prev\n              disabled={page === 1}\n              onClick={onPreviousButtonClick}\n            />\n            <Pagination.Item disabled={true}>\n              Page {page}, results {pageStart} to {pageEnd}\n            </Pagination.Item>\n            <Pagination.Next\n              disabled={page * RESULTS_PER_PAGE > matchingPackages.length}\n              onClick={onNextButtonClick}\n            />\n          </Pagination>\n        </Col>\n      </Row>\n\n      <Row>\n        <Col sm={4}>\n          <Alert variant=\"light\">\n            Matching packages: {matchingPackages.length} in {revs.length} commits\n          </Alert>\n        </Col>\n      </Row>\n\n      <Row>\n        <Col sm={12}>\n          <Accordion defaultActiveKey={matchingPackages[0]}>\n            <Card>\n              <Accordion.Toggle as={Card.Header} variant=\"dark\">\n                <Row>\n                  <Col sm={3}><b>Attribute</b></Col>\n                  <Col><b>Description</b></Col>\n                  <Col sm={1}><b>Versions</b></Col>\n                  <Col sm={2}><b>License</b></Col>\n                </Row>\n              </Accordion.Toggle>\n            </Card>\n            {matchingPackages\n              .slice(pageStart - 1, pageEnd)\n              .map((pkg) => <Pkg key={pkg} pkg={pkg} />)}\n          </Accordion>\n        </Col>\n      </Row>\n\n      <Row>\n        <Col sm={4}>\n          <Alert variant=\"light\">\n            Copyright 2020, Kevin Amado <br />\n          </Alert>\n        </Col>\n      </Row>\n    </React.Fragment>\n  );\n}\n\nexport const Search = () => {\n  const pkgs = useFetchJSON(`${DATA_SOURCE}/data/pkgs.json`, []);\n  const revs = useFetchJSON(`${DATA_SOURCE}/data/revs.json`, []);\n\n  return (\n    <React.Fragment>\n      <Navbar>\n        <Navbar.Brand>\n          <h1>Nix Packages Database!</h1>\n          <h5>A database with packages from all versions, all commits and all channels.</h5>\n        </Navbar.Brand>\n      </Navbar>\n      <Container fluid={true}>\n        {pkgs.length === 0 ? (\n          <ProgressBar label=\"Loading...\" variant=\"info\" />\n        ) : (\n          <Results pkgs={pkgs} revs={revs} />\n        )}\n      </Container>\n    </React.Fragment>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport { Search } from './views/Search';\n\nconst Root = () => (\n  <Search />\n);\n\nReactDOM.render(\n  <Root />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}