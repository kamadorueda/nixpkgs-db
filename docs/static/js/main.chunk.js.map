{"version":3,"sources":["constants.jsx","components/Markdown.jsx","hooks/fetch.jsx","components/ProgressBar.jsx","views/Search.jsx","views/Root.jsx","index.js","views/About.md","views/Contributing.md"],"names":["DATA_SOURCE","NIXPKGS_SOURCE","renderers","text","props","children","break","heading","React","createElement","concat","level","code","Fragment","language","style","value","Markdown","content","markdownTab","Row","Col","sm","useFetchJSON","url","defaultData","useState","data","setData","getAnswer","a","fetch","res","json","useEffect","ProgressBar","animated","label","now","Math","random","variant","stripped","filterPkgs","pkgs","pkgName","filter","pkg","includes","sort","Pkg","dataSource","values","Object","entries","b","sortByVersion","length","Card","Accordion","Toggle","as","Header","eventKey","lastVersion","lastData","meta","homepage","href","rel","target","description","undefined","license","fullName","Collapse","Jumbotron","defaultActiveKey","revs","map","item","itemVersion","itemData","itemKey","Body","Text","Container","fluid","Results","page","setPage","setPkgName","matchingPackages","setMatchingPackages","pageStart","min","pageEnd","InputGroup","Prepend","id","FormControl","aria-label","aria-describedby","defaultValue","onChange","event","Button","onClick","Pagination","Prev","disabled","Item","Next","slice","key","Search","Tab","Nav","Link","Root","Navbar","Brand","to","exact","path","component","contentAbout","contentContributing","Alert","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.chunk.js","sourcesContent":["export const DATA_SOURCE = 'https://raw.githubusercontent.com/kamadorueda/nixpkgs-db/latest'\nexport const NIXPKGS_SOURCE = 'https://github.com/NixOS/nixpkgs'\n","import React from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { Col, Row } from 'react-bootstrap';\nimport { vs as style } from 'react-syntax-highlighter/dist/esm/styles/hljs';\n\nconst renderers = {\n  text: (props) => <span>{props.children}</span>,\n  break: () => <br />,\n  heading: (props) => React.createElement(\"h\".concat(props.level + 1), {}, props.children),\n  code: (props) => (\n    <React.Fragment>\n      <hr />\n      <SyntaxHighlighter language={props.language} style={style}>\n        {props.value}\n      </SyntaxHighlighter>\n      <hr />\n    </React.Fragment>\n  )\n  // paragraph: (props) => <p>{props.children}</p>,\n  // emphasis: (props) => <em>{props.children}</em>,\n  // strong: (props) => <strong>{props.children}</strong>,\n  // thematicBreak: (props) => <hr>{props.children}</hr>,\n  // blockquote: (props) => <blockquote>{props.children}</blockquote>,\n  // link: (props) => <a>{props.children}</a>,\n  // image: (props) => <img>{props.children}</img>,\n  // linkReference: (props) => <a>{props.children}</a>,\n  // imageReference: (props) => <img>{props.children}</img>,\n  // listItem: (props) => <li>{props.children}</li>,\n  // inlineCode: (props) => <code>{props.children}</code>,\n  // list: (props) => <ul> or <ol>{props.children}</ul> or <ol>,\n  // {/* heading: (props) => <h1> through <h6>{props.children}</h1> through <h6>, */}\n}\n\nexport const Markdown = (props) => (\n  <ReactMarkdown\n    children={props.content}\n    renderers={renderers}\n  />\n)\n\nexport const markdownTab = (content) => () => {\n  return (\n    <Row>\n      <Col sm={12}>\n        <Markdown content={content} />\n      </Col>\n    </Row>\n  );\n}\n","import { useEffect, useState } from 'react';\n\nexport const useFetchJSON = (url, defaultData) => {\n  const [data, setData] = useState(defaultData);\n\n  const getAnswer = async () => {\n    const res = await fetch(url);\n    setData(await res.json());\n  };\n\n  useEffect(() => {\n    getAnswer();\n  }, []);\n\n  return data;\n}\n","import React from 'react';\nimport { ProgressBar as BootstrapProgressBar } from 'react-bootstrap';\n\nexport const ProgressBar = (props) => (\n  <BootstrapProgressBar\n    animated={true}\n    label={props.label}\n    now={100 * Math.random()}\n    variant={props.variant}\n    stripped={true}\n  />\n)\n","import React, { useState } from 'react';\nimport {\n  Accordion,\n  Alert,\n  Button,\n  Card,\n  Col,\n  Container,\n  FormControl,\n  InputGroup,\n  Jumbotron,\n  Pagination,\n  Row,\n} from 'react-bootstrap';\n\nimport { ProgressBar } from '../components/ProgressBar';\nimport { DATA_SOURCE, NIXPKGS_SOURCE } from '../constants';\nimport { useFetchJSON } from '../hooks/fetch';\n\nconst DEFAULT_PKG_NAME = \"\";\nconst RESULTS_PER_PAGE = 10;\n\nconst filterPkgs = (pkgs, pkgName) => (\n  pkgs.filter((pkg) => pkg.includes(pkgName)).sort()\n);\n\nconst sortByVersion = (data) => {\n  var values = Object.entries(data);\n  values.sort((a, b) => a[0] < b[0] ? 1 : -1);\n  return values;\n};\n\nconst Pkg = (props) => {\n  const pkg = props.pkg;\n\n  const dataSource = `${DATA_SOURCE}/data/pkgs/${pkg}.json`;\n  const data = sortByVersion(useFetchJSON(dataSource, {}));\n\n  if (data.length === 0) {\n    return (\n      <Card>\n        <Accordion.Toggle as={Card.Header} variant=\"link\" eventKey={pkg}>\n          <ProgressBar label=\"Loading...\" variant=\"info\" />\n        </Accordion.Toggle>\n      </Card>\n    );\n  } else {\n    const lastVersion = data[0][0];\n    const lastData = data[0][1];\n\n    return (\n      <Card>\n        <Accordion.Toggle as={Card.Header} variant=\"link\" eventKey={pkg}>\n          <Row>\n            <Col sm={3}>\n              <b>\n                {lastData.meta.homepage === \"\" ? pkg : (\n                  <a href={lastData.meta.homepage} rel=\"noopener\" target=\"blank\">\n                    {pkg}\n                  </a>\n                )}\n              </b>\n            </Col>\n            <Col>{lastData.meta.description}</Col>\n            <Col sm={1}>{data.length}</Col>\n            <Col sm={2}>\n              {lastData.meta.license?.fullName === undefined\n                ? undefined\n                : lastData.meta.license.fullName}\n            </Col>\n          </Row>\n        </Accordion.Toggle>\n        <Accordion.Collapse eventKey={pkg}>\n          <Jumbotron>\n            <Accordion defaultActiveKey={`${pkg} v${lastVersion} @ ${lastData.revs[1]}`}>\n              {data.map((item) => {\n                const itemVersion = item[0];\n                const itemData = item[1];\n                const itemKey = `${pkg} v${itemVersion} @ ${itemData.revs[1]}`;\n\n                return (\n                  <Card>\n                    <Accordion.Toggle as={Card.Header} variant=\"link\" eventKey={itemKey}>\n                      <a href={dataSource} rel=\"noopener\" target=\"blank\">\n                        <b>{pkg} v{itemVersion}</b>\n                      </a>\n                    </Accordion.Toggle>\n                    <Accordion.Collapse eventKey={itemKey}>\n                      <Card.Body>\n                        <Card.Text>\n                          <Container fluid>\n                            <Row>\n                              <Col>\n                                <code>\n                                  $ <b>nix-shell</b> -p {pkg} -I nixpkgs={`${NIXPKGS_SOURCE}/archive/${itemData.revs[1]}.tar.gz`}\n                                </code>\n                              </Col>\n                            </Row>\n                            <Row>\n                              <Col>\n                                <code>\n                                  $ <b>nix-env</b> -i {pkg} -f {`${NIXPKGS_SOURCE}/archive/${itemData.revs[1]}.tar.gz`}\n                                </code>\n                              </Col>\n                            </Row>\n                          </Container>\n                        </Card.Text>\n                      </Card.Body>\n                    </Accordion.Collapse>\n                  </Card>\n                );\n              })}\n            </Accordion>\n          </Jumbotron>\n        </Accordion.Collapse>\n      </Card>\n    );\n  }\n}\n\nconst Results = (props) => {\n  const pkgs = props.pkgs;\n  const revs = props.revs;\n\n  const [page, setPage] = useState(1);\n  const [pkgName, setPkgName] = useState(DEFAULT_PKG_NAME);\n  const [matchingPackages, setMatchingPackages] = useState(filterPkgs(pkgs, DEFAULT_PKG_NAME));\n\n  const onPkgNameChange = (event) => {\n    setPkgName(event.target.value);\n  };\n\n  const onSearchButtonClick = () => {\n    setPage(1);\n    setMatchingPackages(filterPkgs(pkgs, pkgName));\n  };\n\n  const onPreviousButtonClick = () => {\n    setPage(page - 1);\n  };\n  const onNextButtonClick = () => {\n    setPage(page + 1);\n  };\n\n  const pageStart = Math.min(1 + (page - 1) * RESULTS_PER_PAGE, matchingPackages.length);\n  const pageEnd = Math.min(page * RESULTS_PER_PAGE, matchingPackages.length);\n\n  return (\n    <React.Fragment>\n      <Row>\n        <Col sm={6}>\n          <InputGroup>\n            <InputGroup.Prepend>\n              <InputGroup.Text id=\"pkgName\">Package name</InputGroup.Text>\n            </InputGroup.Prepend>\n            <FormControl\n              aria-label=\"pkgName\"\n              aria-describedby=\"pkgName\"\n              defaultValue={DEFAULT_PKG_NAME}\n              onChange={onPkgNameChange}\n            />\n            <Button onClick={onSearchButtonClick} variant=\"outline-primary\" >\n              Search\n            </Button>\n          </InputGroup>\n        </Col>\n        <Col sm={6}>\n          <Pagination>\n            <Pagination.Prev\n              disabled={page === 1}\n              onClick={onPreviousButtonClick}\n            />\n            <Pagination.Item disabled={true}>\n              Showing packages {pageStart}-{pageEnd} of {matchingPackages.length}\n            </Pagination.Item>\n            <Pagination.Next\n              disabled={page * RESULTS_PER_PAGE > matchingPackages.length}\n              onClick={onNextButtonClick}\n            />\n          </Pagination>\n        </Col>\n      </Row>\n\n      <Row>\n        <Col sm={12}>\n          <Accordion defaultActiveKey={matchingPackages[0]}>\n            <Card>\n              <Accordion.Toggle as={Card.Header} variant=\"dark\">\n                <Row>\n                  <Col sm={3}><b>Attribute</b></Col>\n                  <Col><b>Description</b></Col>\n                  <Col sm={1}><b>Versions</b></Col>\n                  <Col sm={2}><b>License</b></Col>\n                </Row>\n              </Accordion.Toggle>\n            </Card>\n            {matchingPackages\n              .slice(pageStart - 1, pageEnd)\n              .map((pkg) => <Pkg key={pkg} pkg={pkg} />)}\n          </Accordion>\n        </Col>\n      </Row>\n    </React.Fragment>\n  );\n}\n\nexport const Search = () => {\n  const pkgs = useFetchJSON(`${DATA_SOURCE}/data/pkgs.json`, []);\n  const revs = useFetchJSON(`${DATA_SOURCE}/data/revs.json`, []);\n\n  return (\n    <React.Fragment>\n      {pkgs.length === 0 ? (\n        <ProgressBar label=\"Loading...\" variant=\"info\" />\n      ) : (\n        <Results pkgs={pkgs} revs={revs} />\n      )}\n    </React.Fragment>\n  );\n}\n","import React from 'react';\nimport {\n  Alert,\n  Col,\n  Container,\n  Nav,\n  Navbar,\n  Row,\n} from 'react-bootstrap';\nimport {\n  HashRouter,\n  Link,\n  Redirect,\n  Route,\n  Switch,\n} from \"react-router-dom\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport { DATA_SOURCE } from '../constants';\nimport { markdownTab } from '../components/Markdown';\nimport { useFetchJSON } from '../hooks/fetch';\nimport contentAbout from './About.md';\nimport contentContributing from './Contributing.md';\nimport { Search } from './Search';\n\nconst Tab = (props) => (\n  <Nav.Item>\n    <Nav.Link href={props.href}>\n      {props.children}\n    </Nav.Link>\n  </Nav.Item>\n);\n\nexport const Root = () => {\n  const pkgs = useFetchJSON(`${DATA_SOURCE}/data/pkgs.json`, []);\n  const revs = useFetchJSON(`${DATA_SOURCE}/data/revs.json`, []);\n\n  return (\n    <React.Fragment>\n      <HashRouter>\n        <Navbar>\n          <Navbar.Brand>\n            <h1>Nixpkgs Database!</h1>\n            <h5>A database with packages from all versions, all commits and all channels.</h5>\n          </Navbar.Brand>\n        </Navbar>\n        <Container fluid={true}>\n          <Row>\n            <Col sm={12}>\n              <Nav variant=\"tabs\">\n                <Tab><Link to=\"/about\">About</Link></Tab>\n                <Tab><Link to=\"/contributing\">Contributing</Link></Tab>\n                <Tab><Link to=\"/search\">Search</Link></Tab>\n                <Tab href=\"https://github.com/kamadorueda/nixpkgs-db\">Source</Tab>\n                <Tab href=\"https://www.patreon.com/kamadorueda\">Sponsor</Tab>\n              </Nav>\n            </Col>\n          </Row>\n          <br />\n          <Switch>\n            <Route exact={true} path=\"/search\" component={Search} />\n            <Route exact={true} path=\"/about\" component={markdownTab(contentAbout)} />\n            <Route exact={true} path=\"/contributing\" component={markdownTab(contentContributing)} />\n            <Redirect to=\"/search\" />\n          </Switch>\n          <hr />\n          <Row>\n            <Col sm={12}>\n              <Alert variant=\"light\">\n                A total of {pkgs.length} packages and {revs.length} commits put in your hands <br />\n                Created and maintained by Kevin Amado\n              </Alert>\n            </Col>\n          </Row>\n        </Container>\n      </HashRouter>\n    </React.Fragment>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport { Root } from './views/Root';\n\nReactDOM.render(\n  <Root />,\n  document.getElementById('root'),\n);\n","module.exports = \"# Searching and installing many versions of Nix packages\\n\\nOne of the advantages of **Nix** is the ability to install / use packages in\\n**isolated environments** from the host system:\\n\\n```bash\\n# Version installed in my host system\\n$ python3 --version\\n\\n  Python 3.8.5\\n\\n# Launch a Nix Shell with a different version of the package\\n$ nix-shell -p python39\\n\\n  # Version installed in the Nix shell\\n  nix-shell $ python3 --version\\n\\n    Python 3.9.0\\n```\\n\\nSometime ago while migrating an old **Kubernetes** cluster\\nI found in the need of having two different versions of **Helm**\\nin order to deal with **legacy** and **recent** deployments.\\n\\nThe solution is trivial: Use **Nix** to install the two versions!\\n\\nSo let's search the versions that Nix offers to us:\\n\\n```bash\\n# Query the <nixpkgs> set in the host system\\n$ nix-env -q --available --description | grep helm\\n\\n  helm-3.3.4  A package manager for kubernetes\\n```\\n\\nProblem is that nix-channels usually offer a single version of a package,\\nso ¿What to do?\\n\\nSadly,\\nthere is no native way of searching the Nix history for all versions of a package.\\n\\nGood thing is the community has come up with initiatives:\\n\\n- [Nixpkgs Database](/nixpkgs-db)\\n- [Nix-package-revisions](https://lazamar.github.io/download-specific-package-version-with-nix)\\n\\nThat index the Nixpkgs history in order to provide versions lookups:\\n\\n```bash\\nAttribute        Description                       Versions  License\\nkubernetes-helm  A package manager for kubernetes  30        Apache License 2.0\\n\\n  kubernetes-helm v3.4.0\\n  kubernetes-helm v3.1.1\\n  kubernetes-helm v3.1.0\\n  kubernetes-helm v3.0.3\\n  kubernetes-helm v3.0.1\\n  kubernetes-helm v2.9.1\\n  kubernetes-helm v2.6.1\\n  ...\\n```\\n\\nThey even give you the command to install the package in your system!\\n\\n```bash\\n# Helm is not even installed in my host system\\n$ helm version\\n\\n  Command 'helm' not found\\n\\n# Launch a Nix Shell with version 3.4.0 found in Nixpkgs Database\\n$ nix-shell -p kubernetes-helm -I nixpkgs=https://github.com/NixOS/nixpkgs/archive/0126c86672b7d14843225df16ddfefd7091eabe7.tar.gz\\n\\n  # Version installed in the Nix shell\\n  nix-shell $ helm version\\n\\n    version.BuildInfo{Version:\\\"v3.4.0\\\", GitCommit:\\\"\\\", GitTreeState:\\\"\\\", GoVersion:\\\"go1.15.3\\\"}\\n\\n# Launch a Nix Shell with version 2.6.1 found in Nixpkgs Database\\n$ nix-shell -p kubernetes-helm -I nixpkgs=https://github.com/NixOS/nixpkgs/archive/01a664e7793158b434fefac9217ec48313b2dd45.tar.gz\\n\\n  # Version installed in the Nix shell\\n  nix-shell $ helm version\\n\\n    Client: &version.Version{SemVer:\\\"v2.6.1\\\", GitCommit:\\\"bbc1f71dc03afc5f00c6ac84b9308f8ecb4f39ac\\\", GitTreeState:\\\"clean\\\"}\\n```\\n\\nThis project is entirely **Open Source**!\\n\\nWe welcome [contributions](/nixpkgs-db/#/contributing) :)\\n\";","module.exports = \"This site is run by the effort of the community,\\nyou can be part of it!\\n\\nWe genuinely appreciate people who are trying to improve this database.\\n\\n**Contributing examples**\\n\\nThere are many ways to contribute, not necessarily technical:\\n\\n- Tell other people of the work being done here.\\n- [Sponsor](https://patreon.com/kamadorueda) the project.\\n- Star or fork the [repository](https://github.com/kamadorueda/nixpkgs-db) so other people can find us easier.\\n- The search engine is naive (currently a `String.contains`).\\n  It would be awesome to use a modern algorithm.\\n- Expanding the database size:\\n\\n  There are currently 280k+ commits in the nixpkgs repository,\\n  we've only processed ~10k.\\n\\n  Expanding it is simple, though it consumes a little bit of machine resources:\\n\\n  - Clone the nixpkgs-db repository.\\n  - Execute: `./build/sync.sh`\\n  - Commit your `nixpkgs-db/data/` folder and create a PR.\\n\\n  The process is differential, once a commit is processed it's ignored in future\\n  executions.\\n- Help us improve the user interface.\\n- Fire up an issue! we welcome ideas, feature requests and problems.\\n\";"],"sourceRoot":""}