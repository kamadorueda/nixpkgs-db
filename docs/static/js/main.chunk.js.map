{"version":3,"sources":["constants.jsx","components/A.jsx","components/Code.jsx","components/Markdown.jsx","hooks/fetch.jsx","components/ErrorBoundary.jsx","components/ProgressBar.jsx","utils/badges.jsx","views/Badge.jsx","views/Pkg.jsx","utils/strings.jsx","views/Search.jsx","views/Root.jsx","index.js","views/About.md","views/Contributing.md","views/Source.md","views/Sponsor.md"],"names":["GITHUB_RAW_NIXPKGS_DB","A","props","params","href","undefined","remote","children","onCopy","alert","CopyButton","inner","content","type","style","color","text","Highlight","lang","language","Code","dedent","copyable","contentD","dedentContent","Fragment","CodeBlock","renderers","break","code","value","heading","level","React","createElement","concat","link","Markdown","plugins","gfm","markdownTab","Row","Col","sm","fetchJSON","url","a","fetch","response","ok","status","json","useFetchJSON","defaultData","useState","data","setData","useEffect","ErrorBoundary","state","hasError","error","errorInfo","this","onError","Component","ProgressBar","animated","label","now","Math","random","variant","striped","COLORS","STYLES","FORMATS_FUNCTIONS","imageURL","linkURL","FORMATS","Object","keys","Badges","pkg","useParams","badgesData","setBadgesData","setContent","format","setFormat","setLabel","encodeURIComponent","getLinkURL","newBadgesData","apply","map","labelColor","logo","logoColor","URL","searchParams","set","toString","badge","badgeContent","onBadgeSelection","InputGroup","Prepend","Text","Form","Control","as","onChange","event","target","id","defaultValue","radioID","xs","md","defaultChecked","name","onClick","alt","src","pkgVersionLink","version","formatMaintainers","maintainers","formatted","maintainer","push","email","sort","formatPlatforms","platforms","includes","platform","Item","title","PkgLoaded","dataJSON","dataSource","to","versionData","versionDataLastRev","revs","versions","nixpkgs","nixEnv","nixShell","nixBuild","pkgName","meta","v","description","long_description","homepage","license","fullName","Pkg","entries","reverse","length","searchString","item","list","itemLower","toLowerCase","elem","distance","b","elemLower","Levenshtein","x","PkgLoading","lastData","pkgLink","lg","Badge","SearchLoaded","pkgs","page","setPage","matchingPackages","setMatchingPackages","min","endPage","startPage","changePage","delta","matchingPackagesOnPage","slice","FormControl","ButtonGroup","size","Button","disabled","key","Search","Tab","Nav","Link","Root","Container","fluid","fontSize","exact","path","contentAbout","contentContributing","contentSource","contentSponsor","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.chunk.js","sourcesContent":["export const GITHUB_RAW_NIXPKGS_DB = 'https://raw.githubusercontent.com/kamadorueda/nixpkgs-db/latest'\nexport const GITHUB_NIXPKGS = 'https://github.com/NixOS/nixpkgs'\n","import React from 'react';\n\nexport const A = (props) => {\n  let params = {\n    href: props.href,\n  };\n\n  const remote = props.remote === undefined ? true : props.remote;\n\n  if (remote) {\n    params[\"rel\"] = \"noopener\";\n    params[\"target\"] = \"_blank\";\n  }\n\n  return (\n    <a {...params}>\n      {props.children === undefined ? props.href : props.children}\n    </a>\n  );\n};\n","import React from 'react';\nimport dedentContent from 'dedent';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport { RiFileCopyLine } from 'react-icons/ri';\nimport { defaultStyle as style } from 'react-syntax-highlighter/dist/esm/styles/hljs';\n\nconst onCopy = () => alert('Copied!');\n\nexport const CopyButton = ({ content, type }) => {\n  const style = { color: \"#007bff\" };\n\n  let inner;\n  switch (type) {\n    case \"icon\":\n      inner = <span style={style}><RiFileCopyLine /></span>\n      break;\n    case \"icon+copy\":\n      inner = <span style={style}><RiFileCopyLine /> Copy</span>\n      break;\n    case \"icon+copy+center\":\n      inner = <center style={style}><RiFileCopyLine /> Copy</center>\n      break;\n    default:\n      throw type;\n  }\n\n  return (\n    <CopyToClipboard onCopy={onCopy} text={content}>\n      {inner}\n    </CopyToClipboard>\n  );\n};\n\nexport const Highlight = ({\n  content,\n  lang,\n}) => (\n  <SyntaxHighlighter\n    language={lang}\n    style={style}\n  >\n    {content}\n  </SyntaxHighlighter>\n);\n\nexport const Code = ({\n  content,\n  dedent=true,\n  copyable=false,\n  lang,\n}) => {\n  const contentD = dedent ? dedentContent(content) : content;\n\n  return (\n    <React.Fragment>\n      <Highlight\n        content={contentD}\n        lang={lang}\n      />\n      {copyable ? <CopyButton content={contentD} type=\"icon+copy+center\" /> : undefined }\n    </React.Fragment>\n  );\n};\n\nexport const CodeBlock = ({ content, dedent, copyable, lang }) => {\n  return (\n    <React.Fragment>\n      <hr />\n      <Code content={content} copyable={copyable} dedent={dedent} lang={lang} />\n      <hr />\n    </React.Fragment>\n  );\n};\n","import React from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport gfm from 'remark-gfm';\nimport { Col, Row } from 'react-bootstrap';\n\nimport { A } from './A';\nimport { CodeBlock } from './Code';\n\nconst renderers = {\n  break: () => <br />,\n  code: ({ language, value }) => <CodeBlock\n    content={value}\n    dedent={false}\n    lang={language}\n  />,\n  heading: ({ children, level }) => React.createElement(\n    \"h\".concat(level + 1), {}, children,\n  ),\n  text: ({ children }) => <span>{children}</span>,\n  link: ({ href, children}) => <A href={href}>{children}</A>,\n\n  // paragraph: (props) => <p>{props.children}</p>,\n  // emphasis: (props) => <em>{props.children}</em>,\n  // strong: (props) => <strong>{props.children}</strong>,\n  // thematicBreak: (props) => <hr>{props.children}</hr>,\n  // blockquote: (props) => <blockquote>{props.children}</blockquote>,\n  // image: (props) => <img>{props.children}</img>,\n  // linkReference: (props) => <a>{props.children}</a>,\n  // imageReference: (props) => <img>{props.children}</img>,\n  // listItem: (props) => <li>{props.children}</li>,\n  // inlineCode: (props) => <code>{props.children}</code>,\n  // list: (props) => <ul> or <ol>{props.children}</ul> or <ol>,\n  // {/* heading: (props) => <h1> through <h6>{props.children}</h1> through <h6>, */}\n}\n\nexport const Markdown = (props) => (\n  <ReactMarkdown\n    children={props.content}\n    plugins={[gfm]}\n    renderers={renderers}\n  />\n)\n\nexport const markdownTab = (content) => () => {\n  return (\n    <Row>\n      <Col sm={12}>\n        <Markdown content={content} />\n      </Col>\n    </Row>\n  );\n}\n","import { useEffect, useState } from 'react';\n\nconst fetchJSON = async (url) => {\n  let response = await fetch(url);\n\n  while (!response.ok || response.status !== 200) {\n    response = await fetch(url);\n  }\n\n  return await response.json();\n};\n\nexport const useFetchJSON = (url, defaultData) => {\n  const [data, setData] = useState(defaultData);\n\n  useEffect(() => {\n    (async () => setData(await fetchJSON(url)))();\n  }, [url]);\n\n  return data;\n}\n","import React from 'react';\n\nexport class ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error) {\n    return { hasError: true };\n  }\n\n  componentDidCatch(error, errorInfo) {\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return this.props.onError;\n    }\n\n    return this.props.children;\n  }\n}\n","import React from 'react';\nimport { ProgressBar as BootstrapProgressBar } from 'react-bootstrap';\n\nexport const ProgressBar = (props) => (\n  <BootstrapProgressBar\n    animated={true}\n    label={props.label}\n    now={100 * Math.random()}\n    variant={props.variant}\n    striped={true}\n  />\n)\n","export const COLORS = [\n  \"blue\",\n  \"blueviolet\",\n  \"brightgreen\",\n  \"green\",\n  \"lightgrey\",\n  \"orange\",\n  \"red\",\n  \"yellow\",\n  \"yellowgreen\",\n];\n\nexport const STYLES = [\n  \"flat\",\n  \"flat-square\",\n  \"plastic\",\n  \"for-the-badge\",\n];\n\nexport const badge = ({\n  color = \"green\",\n  label,\n  labelColor = \"grey\",\n  logo = \"NixOS\",\n  logoColor = \"white\",\n  pkg,\n  style = \"flat\",\n}) => {\n  const url = new URL(\"https://img.shields.io/endpoint\");\n\n// https://img.shields.io/endpoint?color=success&logo=NixOS&logoColor=%23FFF&style=for-the-badge&url=https%3A%2F%2Fraw.githubusercontent.com%2Fkamadorueda%2Fnixpkgs-db%2Flatest%2Fdata%2Fbadges%2Ffoo.json\n\n  url.searchParams.set(\"color\", color);\n  url.searchParams.set(\"label\", label === undefined ? pkg : label);\n  url.searchParams.set(\"labelColor\", labelColor);\n  url.searchParams.set(\"logo\", logo);\n  url.searchParams.set(\"logoColor\", logoColor);\n  url.searchParams.set(\"style\", style);\n  url.searchParams.set(\"url\", `https://raw.githubusercontent.com/kamadorueda/nixpkgs-db/latest/data/badges/${pkg}.json`);\n\n  return url.toString();\n}\n","import React, { useEffect, useState } from 'react';\nimport {\n  Col,\n  Form,\n  InputGroup,\n  Row,\n} from 'react-bootstrap';\nimport { useParams } from 'react-router-dom';\nimport { Code } from '../components/Code';\nimport {\n  badge,\n  COLORS,\n  STYLES,\n} from '../utils/badges';\n\nconst FORMATS_FUNCTIONS = {\n  \"AsciiDoc\": (imageURL, linkURL) => `\n    image:${imageURL}[link=\"${linkURL}\"]\n  `,\n  \"HTML\": (imageURL, linkURL) => `\n    <a href=\"${linkURL}\">\n      <img src=\"${imageURL}\">\n    </a>\n  `,\n  \"Markdown\": (imageURL, linkURL) => `\n    [![](${imageURL})](${linkURL})\n  `,\n  \"ReStructuredText\": (imageURL, linkURL) => `\n    .. image:: ${imageURL}\n      :target: ${linkURL}\n  `,\n};\nconst FORMATS = Object.keys(FORMATS_FUNCTIONS);\n\nconst getLinkURL = (pkg) => (\n  `https://kamadorueda.github.io/nixpkgs-db/#/pkg/${encodeURIComponent(pkg)}`\n);\n\nexport const Badges = () => {\n  const { pkg } = useParams();\n\n  const [badgesData, setBadgesData] = useState([]);\n  const [content, setContent] = useState(\"\");\n  const [format, setFormat] = useState(FORMATS[2]);\n  const [label, setLabel] = useState(pkg);\n\n  const linkURL = getLinkURL(pkg);\n\n  useEffect(() => {\n    const newBadgesData = [].concat.apply([],\n      STYLES.map((style) => COLORS.map((color) => {\n        const imageURL = badge({ color, label, pkg, style });\n        const badgeContent = FORMATS_FUNCTIONS[format](imageURL, linkURL);\n\n        return {\n          badgeContent,\n          color,\n          imageURL,\n          style,\n        };\n      }))\n    );\n\n    setBadgesData(newBadgesData);\n    setContent(newBadgesData[0].badgeContent);\n  }, [format, label, linkURL, pkg])\n\n  const onBadgeSelection = (content) => () => {\n    setContent(content);\n  };\n  const onChangeFormat = (event) => {\n    setFormat(event.target.value);\n  };\n  const onChangeLabel = (event) => {\n    setLabel(event.target.value);\n  };\n\n  return (\n    <React.Fragment>\n      Add the badge of your preference to your project!\n      <br />\n      It will tell your users the number of releases they can install with Nix.\n      <br />\n      It will also link to this page so they can get more information!\n      <br />\n      <br />\n      <InputGroup>\n        <InputGroup.Prepend>\n          <InputGroup.Text>Copy Format</InputGroup.Text>\n        </InputGroup.Prepend>\n        <Form.Control\n          as=\"select\"\n          value={format}\n          onChange={onChangeFormat}\n        >\n          {FORMATS.map((format) => <option id={format}>{format}</option>)}\n        </Form.Control>\n      </InputGroup>\n      <br />\n      <InputGroup>\n        <InputGroup.Prepend>\n          <InputGroup.Text>Custom label</InputGroup.Text>\n        </InputGroup.Prepend>\n        <Form.Control\n          defaultValue={pkg}\n          onChange={onChangeLabel}\n          value={label}\n        />\n      </InputGroup>\n      <br />\n      <Row>\n        {badgesData.map(({ badgeContent, color, imageURL, style }) => {\n          const radioID = `${style}/${color}`;\n\n          return (\n            <Col xs={12} sm={6} md={4}>\n              <input\n                defaultChecked={radioID === \"flat/blue\"}\n                id={radioID}\n                name=\"badge\"\n                onClick={onBadgeSelection(badgeContent)}\n                type=\"radio\"\n              /> <img alt=\"badge\" src={imageURL} />\n            </Col>\n          );\n        })}\n      </Row>\n      <br />\n      <Code\n        content={content}\n        copyable={true}\n        type=\"icon+copy+center\"\n      />\n    </React.Fragment>\n  );\n};\n","import React from 'react';\nimport {\n  Col,\n  Row,\n} from 'react-bootstrap';\nimport {\n  RiCpuLine,\n  RiExternalLinkFill,\n  RiUserHeartLine,\n} from 'react-icons/ri';\nimport { useParams, Redirect } from 'react-router-dom';\nimport { A } from '../components/A';\nimport { Code } from '../components/Code';\nimport { ErrorBoundary } from '../components/ErrorBoundary';\nimport { ProgressBar } from '../components/ProgressBar';\nimport { GITHUB_NIXPKGS, GITHUB_RAW_NIXPKGS_DB } from '../constants';\nimport { useFetchJSON } from '../hooks/fetch';\nimport { Badges } from './Badge';\n\nconst pkgVersionLink = (pkg, version) => (\n  `/pkg/${encodeURIComponent(pkg)}/${encodeURIComponent(version)}`\n);\n\nconst formatMaintainers = (maintainers) => {\n  let formatted = [];\n\n  if (maintainers === undefined) {\n    return formatted;\n  }\n\n  for (let maintainer of maintainers) {\n    switch (typeof maintainer) {\n      case \"string\":\n        formatted.push(maintainer);\n        break;\n      case \"object\":\n        formatted.push(`${maintainer.name} <${maintainer.email}>`);\n        break;\n      default:\n    }\n  }\n\n  return formatted.sort();\n}\n\nconst formatPlatforms = (platforms) => {\n  let formatted = [];\n\n  if ([null, undefined].includes(platforms)) {\n    return formatted;\n  }\n\n  for (let platform of platforms) {\n    switch (typeof platform) {\n      case \"string\":\n        formatted.push(platform);\n        break;\n      default:\n    }\n  }\n\n  return formatted.sort();\n}\n\nconst Item = (props) => (\n  <React.Fragment>\n    <Row>\n      <Col sm={2}><b>{props.title}</b></Col>\n      <Col sm={10}>\n      <ErrorBoundary onError=\"Not specified\">\n        {[null, undefined, \"\"].includes(props.content)\n          ? \"-\"\n          : props.content}\n      </ErrorBoundary>\n      </Col>\n    </Row>\n    <hr />\n  </React.Fragment>\n);\n\nconst PkgLoaded = (props) => {\n  const { data, dataJSON, dataSource } = props;\n  const { pkg, version } = useParams();\n\n  if (version === undefined) {\n    return <Redirect to={pkgVersionLink(pkg, data[0][0])} />;\n  }\n\n  const versionData = dataJSON[version];\n  const versionDataLastRev = versionData?.revs[1];\n  const versions = data.map(([version, _]) => version);\n\n  const nixpkgs = `${GITHUB_NIXPKGS}/archive/${versionDataLastRev}.tar.gz`;\n  const nixEnv = `\n    # Version: ${version}\n    nix-env -i ${pkg} -f ${nixpkgs}\n  `;\n  const nixShell = `\n    # Version: ${version}\n    nix-shell -p ${pkg} -I nixpkgs=${nixpkgs}\n  `;\n  const nixBuild = `\n    let\n      pkgs = import <nixpkgs> { };\n\n      # Version: ${version}\n      ${pkg} = (import (pkgs.fetchzip {\n        url = \"https://github.com/nixos/nixpkgs/archive/${versionDataLastRev}.zip\";\n        # Please update this hash with the one nix says on the first build attempt\n        sha256 = \"0000000000000000000000000000000000000000000000000000000000000000\";\n      }) { }).${pkg};\n    in\n      ...\n  `;\n\n  const pkgName = versionData?.meta?.name === undefined ? \"\" : `(${versionData?.meta?.name})`;\n\n  return (\n    <Row>\n      <Col sm={12}>\n        <Item\n          title=\"Package\"\n          content={`${pkg} ${pkgName}`}\n        />\n        <Item\n          title=\"This page version\"\n          content={\n            <A href={`/nixpkgs-db/#${pkgVersionLink(pkg, version)}`}>\n              <RiExternalLinkFill /> {version}\n            </A>\n          }\n        />\n        <Item\n          title=\"All versions\"\n          content={\n            <Row>\n              {versions.map((v) => (\n                <Col xs={12} sm={6} md={3}>\n                  <A href={`/nixpkgs-db/#${pkgVersionLink(pkg, v)}`}>\n                    <RiExternalLinkFill /> {v}\n                  </A>\n                </Col>\n              ))}\n            </Row>\n          }\n        />\n        <Item\n          title=\"Description\"\n          content={versionData?.meta?.description}\n        />\n        <Item\n          title=\"Long description\"\n          content={versionData?.meta?.long_description}\n        />\n        <Item\n          title=\"Homepage\"\n          content={<A href={versionData?.meta?.homepage} />}\n        />\n        <Item\n          title=\"License\"\n          content={versionData?.meta?.license?.fullName}\n        />\n        <Item\n          title=\"Maintainers\"\n          content={\n            <Row>\n              {formatMaintainers(versionData?.meta?.maintainers).map((maintainer) => (\n                <Col sm={6}> <RiUserHeartLine /> {maintainer}</Col>\n              ))}\n            </Row>\n          }\n        />\n        <Item\n          title=\"Interactive shell\"\n          content={<Code content={nixShell} copyable={true} lang=\"bash\" />}\n        />\n        <Item\n          title=\"Install in your system\"\n          content={<Code content={nixEnv} copyable={true} lang=\"bash\" />}\n        />\n        <Item\n          title=\"Use in an expression\"\n          content={<Code content={nixBuild} copyable={true} lang=\"nix\" />}\n        />\n        <Item\n          title=\"Badges\"\n          content={\n            <Badges pkg={pkg} />\n          }\n        />\n        <Item\n          title=\"Commits range\"\n          content={\n            `${versionData?.revs[0]} -> ${versionData?.revs[1]}\n          `}\n        />\n        <Item\n          title=\"Raw data\"\n          content={<A href={dataSource} />}\n        />\n        <Item\n          title=\"Available platforms\"\n          content={\n            <Row>\n              {formatPlatforms(versionData?.meta?.platforms).map((platform) => (\n                <Col sm={2}> <RiCpuLine /> {platform}</Col>\n              ))}\n            </Row>\n          }\n        />\n      </Col>\n    </Row>\n  );\n};\n\nexport const Pkg = () => {\n  const { pkg } = useParams();\n\n  const dataSource = `${GITHUB_RAW_NIXPKGS_DB}/data/pkgs/${pkg}.json`;\n  const dataJSON = useFetchJSON(dataSource, {});\n  const data =  Object.entries(dataJSON).reverse();\n\n  if (data.length === 0) {\n    return <ProgressBar label=\"Loading...\" variant=\"info\" />;;\n  }\n\n  return <PkgLoaded data={data} dataJSON={dataJSON} dataSource={dataSource} />;\n};\n","import Levenshtein from 'levenshtein';\n\nexport const levenshtein = (a, b) => (\n  new Levenshtein(a, b).distance\n);\n\nexport const searchString = (item, list) => {\n  // Use a mix of Levenshtein distance + grep to offer human-expectable results\n  const itemLower = item.toLowerCase();\n\n  const distances = list.map((elem) => {\n    const elemLower = elem.toLowerCase();\n\n    let distance;\n\n    if (elemLower === itemLower) {\n      distance = 0;\n    } else if (elemLower.includes(itemLower)) {\n      distance = 1;\n    } else {\n      distance = levenshtein(itemLower, elemLower);\n    }\n\n    return [distance, elem];\n  });\n\n  return distances\n    // Sort by Levenshtein distance\n    .sort((a, b) => a[0] - b[0])\n    // Extract the original item\n    .map((x) => x[1]);\n}\n","import React, { useState } from 'react';\nimport {\n  Badge,\n  Button,\n  ButtonGroup,\n  Col,\n  FormControl,\n  InputGroup,\n  Row,\n} from 'react-bootstrap';\nimport {\n  RiExternalLinkFill,\n} from 'react-icons/ri';\nimport { Link } from 'react-router-dom';\nimport { ProgressBar } from '../components/ProgressBar';\nimport { GITHUB_RAW_NIXPKGS_DB } from '../constants';\nimport { useFetchJSON } from '../hooks/fetch';\nimport { searchString } from '../utils/strings';\n\nconst DEFAULT_PKG_NAME = \"nix\";\nconst RESULTS_PER_PAGE = 12;\n\nconst PkgLoading = () => (\n  <React.Fragment>\n    <Row>\n      <Col sm={12}>\n        <ProgressBar label=\"Loading...\" variant=\"info\" />\n      </Col>\n    </Row>\n    <hr />\n  </React.Fragment>\n);\n\nconst PkgLoaded = (props) => {\n  const { data, pkg } = props;\n  const lastData = props.data[0][1];\n  const pkgLink = `/pkg/${encodeURIComponent(pkg)}`;\n\n  return (\n    <React.Fragment>\n      <Col xs={12} sm={6} md={4} lg={3}>\n        <Row>\n          <Col sm={12}>\n            <Link to={pkgLink}>\n              <RiExternalLinkFill /> {pkg}\n              {pkg === lastData.meta.name ? \"\" : ` (${lastData.meta.name})`}\n            </Link>\n          </Col>\n        </Row>\n        <Row>\n          <Col sm={12}>\n            {lastData.meta.description}\n          </Col>\n        </Row>\n        <Row>\n          <Col sm={12}>\n            <Badge variant=\"info\">\n              {data.length} version{data.length >= 2 ? \"s\" : \"\"} available\n            </Badge>\n          </Col>\n        </Row>\n        <br />\n      </Col>\n    </React.Fragment>\n  );\n};\n\nconst Pkg = (props) => {\n  const pkg = props.pkg;\n\n  const dataSource = `${GITHUB_RAW_NIXPKGS_DB}/data/pkgs/${pkg}.json`;\n  const dataJSON = useFetchJSON(dataSource, {});\n  const data =  Object.entries(dataJSON).reverse();\n\n  if (data.length === 0) {\n    return <PkgLoading />;\n  }\n\n  return <PkgLoaded data={data} pkg={pkg} />;\n};\n\nconst SearchLoaded = (props) => {\n  const { pkgs } = props;\n\n  const [page, setPage] = useState(1);\n  const [matchingPackages, setMatchingPackages] = useState(searchString(DEFAULT_PKG_NAME, pkgs));\n  const [endPage, startPage] = [\n    Math.min((page - 0) * RESULTS_PER_PAGE + 0, matchingPackages.length),\n    Math.min((page - 1) * RESULTS_PER_PAGE + 1, matchingPackages.length),\n  ];\n\n  const changePage = (delta) => () => {\n    setPage(page + delta);\n  };\n  const onPkgNameChange = (event) => {\n    setPage(1);\n    setMatchingPackages(searchString(event.target.value, pkgs));\n  };\n\n  const matchingPackagesOnPage = matchingPackages.slice(startPage - 1, endPage);\n\n  return (\n    <React.Fragment>\n      {/* Search box */}\n      <Row>\n        <Col sm={12}>\n          <InputGroup>\n            <InputGroup.Prepend>\n              <InputGroup.Text>Package name</InputGroup.Text>\n            </InputGroup.Prepend>\n            <FormControl\n              defaultValue={DEFAULT_PKG_NAME}\n              onChange={onPkgNameChange}\n            />\n          </InputGroup>\n        </Col>\n      </Row>\n\n      {/* Pagination */}\n      <br />\n      <Row>\n        <Col sm={12}>\n          <ButtonGroup size=\"md\">\n            <Button\n              disabled={page === 1}\n              onClick={changePage(-1)}\n              variant=\"outline-primary\"\n            >\n              &lt; Previous\n            </Button>\n            <Button\n              disabled={true}\n              variant=\"outline-primary\"\n            >\n              Page {page}\n            </Button>\n            <Button\n              disabled={page * RESULTS_PER_PAGE > matchingPackages.length}\n              onClick={changePage(+1)}\n              variant=\"outline-primary\"\n            >\n              Next &gt;\n            </Button>\n          </ButtonGroup>\n        </Col>\n      </Row>\n\n      {/* Results table */}\n      <hr />\n      <Row>\n        {matchingPackagesOnPage.map((pkg) => <Pkg key={pkg} pkg={pkg} />)}\n      </Row>\n    </React.Fragment>\n  );\n}\n\nexport const Search = (props) => {\n  if (props.pkgs.length === 0) {\n    return <ProgressBar label=\"Loading...\" variant=\"info\" />;\n  }\n\n  return <SearchLoaded pkgs={props.pkgs} revs={props.revs} />;\n}\n","import React from 'react';\nimport {\n  Col,\n  Container,\n  Nav,\n  Row,\n} from 'react-bootstrap';\nimport {\n  HashRouter,\n  Link,\n  Redirect,\n  Route,\n  Switch,\n} from \"react-router-dom\";\nimport {\n  RiBrushLine,\n  RiCodeSSlashLine,\n  RiHeart3Line,\n  RiInformationLine,\n  RiSearchLine,\n} from 'react-icons/ri';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport contentAbout from './About.md';\nimport contentContributing from './Contributing.md';\nimport contentSource from './Source.md';\nimport contentSponsor from './Sponsor.md';\nimport { GITHUB_RAW_NIXPKGS_DB } from '../constants';\nimport { A } from '../components/A';\nimport { markdownTab } from '../components/Markdown';\nimport { useFetchJSON } from '../hooks/fetch';\nimport { Pkg } from './Pkg';\nimport { Search } from './Search';\n\nconst Tab = (props) => (\n  <Nav.Item>\n    <Nav.Link href={props.href}>\n      {props.children}\n    </Nav.Link>\n  </Nav.Item>\n);\n\nexport const Root = () => {\n  const pkgs = useFetchJSON(`${GITHUB_RAW_NIXPKGS_DB}/data/pkgs.json`, []);\n  const revs = useFetchJSON(`${GITHUB_RAW_NIXPKGS_DB}/data/revs.json`, []);\n\n  return (\n    <Container fluid={true}>\n      {/* Header */}\n      <A href=\"/nixpkgs-db\" remote={false}>\n        <Row>\n          <Col sm={12}>\n            <h1>Nixpkgs Database!</h1>\n            <h2 style={{ fontSize: \"1rem\" }}>\n              A database with packages at all versions, from all channels.\n            </h2>\n          </Col>\n        </Row>\n      </A>\n\n      {/* Content */}\n      <HashRouter>\n        {/* Navigation tabs */}\n        <Row>\n          <Col sm={12}>\n            <Nav variant=\"tabs\">\n              <Tab>\n                <Link to=\"/about\"><RiInformationLine /> About</Link>\n              </Tab>\n              <Tab>\n                <Link to=\"/contributing\"><RiBrushLine /> Contributing</Link>\n              </Tab>\n              <Tab>\n                <Link to=\"/search\"><RiSearchLine /> Search</Link>\n              </Tab>\n              <Tab>\n                <Link to=\"/source\"><RiCodeSSlashLine /> Source</Link>\n              </Tab>\n              <Tab>\n                <Link to=\"/sponsor\"><RiHeart3Line /> Sponsor</Link>\n              </Tab>\n            </Nav>\n          </Col>\n        </Row>\n        <br />\n\n        {/* Dynamic page body */}\n        <Switch>\n          <Route exact={true} path=\"/about\">\n            {markdownTab(contentAbout)}\n          </Route>\n          <Route exact={true} path=\"/contributing\">\n            {markdownTab(contentContributing)}\n          </Route>\n          <Route exact={true} path=\"/pkg/:pkg\">\n            <Pkg />\n          </Route>\n          <Route exact={true} path=\"/pkg/:pkg/:version\">\n            <Pkg />\n          </Route>\n          <Route exact={true} path=\"/search\">\n            <Search pkgs={pkgs} revs={revs} />\n          </Route>\n          <Route exact={true} path=\"/source\">\n            {markdownTab(contentSource)}\n          </Route>\n          <Route exact={true} path=\"/sponsor\">\n            {markdownTab(contentSponsor)}\n          </Route>\n          <Redirect to=\"/search\" />\n        </Switch>\n      </HashRouter>\n\n      {/* Footer */}\n      <hr />\n      <Row>\n        <Col sm={12}>\n          <div style={{ color: \"grey\" }}>\n            A total of {pkgs.length} packages and {revs.length} commits put in your hands! <br />\n            Please help us improve by <A href=\"https://github.com/kamadorueda/nixpkgs-db/issues\">reporting issues</A> <RiHeart3Line />\n          </div>\n        </Col>\n      </Row>\n      <hr />\n    </Container>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport { Root } from './views/Root';\n\nReactDOM.render(\n  <Root />,\n  document.getElementById('root'),\n);\n","module.exports = \"One of the advantages of **Nix** is the ability to install / use packages in\\n**isolated environments** from the host system:\\n\\n```bash\\n# Version installed in my host system\\n$ python3 --version\\n\\n  Python 3.8.5\\n\\n# Launch a Nix Shell with a different version of the package\\n$ nix-shell -p python39\\n\\n  # Version installed in the Nix shell\\n  nix-shell $ python3 --version\\n\\n              Python 3.9.0\\n```\\n\\nSometime ago while migrating an old **Kubernetes** cluster\\nI found in the need of having two different versions of **Kubernetes Helm**\\nto deal with different kind of deployments.\\n\\n**Nix** allows us to install / use different versions of a package side-by-side\\nin the host system.\\n\\nSo let's search the versions that Nix offers to us out-of-the-box:\\n\\n```bash\\n# Query the <nixpkgs> set in the host system\\n$ nix-env -q --available --description | grep helm\\n\\n  helm-3.3.4  A package manager for kubernetes\\n```\\n\\nProblem is that **nix-channels** usually offer a single version of a package,\\nso... What to do?\\n\\nSadly,\\nthere is no native way of searching the Nix history for all versions of a package.\\n\\nThe good thing is that you are currently at the Nixpkgs Database!\\nWe index every piece of the Nixpkgs history in order to provide versions lookups:\\n\\n```text\\nAttribute        Description                       Versions  License\\nkubernetes-helm  A package manager for kubernetes  30        Apache License 2.0\\n\\n  https://kamadorueda.github.io/nixpkgs-db/#/pkg/kubernetes-helm/3.4.0\\n  https://kamadorueda.github.io/nixpkgs-db/#/pkg/kubernetes-helm/3.3.4\\n  https://kamadorueda.github.io/nixpkgs-db/#/pkg/kubernetes-helm/3.3.1\\n  ...\\n```\\n\\nAnd cool badges that you can add to your project:\\n\\n[![](https://img.shields.io/endpoint?color=brightgreen&label=Kubernetes+Helm&labelColor=grey&logo=NixOS&logoColor=white&style=flat&url=https%3A%2F%2Fraw.githubusercontent.com%2Fkamadorueda%2Fnixpkgs-db%2Flatest%2Fdata%2Fbadges%2Fkubernetes-helm.json)](https://kamadorueda.github.io/nixpkgs-db/#/pkg/kubernetes-helm)\\n\\nWe even give you the command to install the version you want in your system!\\n\\n```bash\\n# Launch a Nix Shell with version 3.4.0 found in Nixpkgs Database\\n$ nix-shell -p kubernetes-helm -I nixpkgs=https://github.com/NixOS/nixpkgs/archive/0126c86672b7d14843225df16ddfefd7091eabe7.tar.gz\\n\\n  # Version installed in the Nix shell\\n  nix-shell $ helm version\\n\\n              version.BuildInfo{Version:\\\"v3.4.0\\\", GitCommit:\\\"\\\", GitTreeState:\\\"\\\", GoVersion:\\\"go1.15.3\\\"}\\n```\\n\\nAnd these commands are also available for all versions that ever existed for this package:\\n\\n```bash\\n# Launch a Nix Shell with version 2.6.1 found in Nixpkgs Database\\n$ nix-shell -p kubernetes-helm -I nixpkgs=https://github.com/NixOS/nixpkgs/archive/01a664e7793158b434fefac9217ec48313b2dd45.tar.gz\\n\\n  # Version installed in the Nix shell\\n  nix-shell $ helm version\\n\\n              Client: &version.Version{SemVer:\\\"v2.6.1\\\", GitCommit:\\\"bbc1f71dc03afc5f00c6ac84b9308f8ecb4f39ac\\\", GitTreeState:\\\"clean\\\"}\\n```\\n\\nThis project is entirely [Free and Open Source Software](https://en.wikipedia.org/wiki/FOSS)!\\n\\nYou can read more about the technical details [here](https://www.patreon.com/posts/creating-zero-43586691).\\n\\nAnd by the way, we welcome [contributions](/nixpkgs-db/#/contributing) :)\\n\";","module.exports = \"This site is run by the effort of the community,\\nyou can be part of it!\\n\\nWe genuinely appreciate people who are trying to improve this database.\\n\\n**Contributing examples**\\n\\nThere are many ways to contribute, not necessarily technical:\\n\\n- Tell other people of the work being done here.\\n- Star or fork the [repository](https://github.com/kamadorueda/nixpkgs-db),\\n  this help us with funding and popularity.\\n- ~~The search engine is naive (currently a `String.contains`).\\n  It would be awesome to use a modern algorithm.~~.\\n\\n  Now we use a mix of Levenshtein distance with grep behavior!\\n- Expanding the database size:\\n\\n  There are currently 280k+ commits in the nixpkgs repository,\\n  we've only processed ~100k.\\n\\n  Expanding it is simple, though it consumes a little bit of machine resources:\\n\\n  - Clone the nixpkgs-db repository.\\n  - Execute: `nixpkgs-db $ ./build/sync.sh`\\n  - Commit your data folder and create a PR: `nixpkgs-db $ git add data/`\\n\\n  The process is differential, once a commit is processed it's ignored in future\\n  executions.\\n- Help us improve the user interface.\\n- Help us write the [CLI](https://github.com/kamadorueda/nixpkgs-db/tree/latest/cli).\\n- Fire up an issue! we welcome ideas, feature requests and problems.\\n- [Become a sponsor of the project](/nixpkgs-db/#/sponsor).\\n\";","module.exports = \"This service is [Free and Open Source Software](https://en.wikipedia.org/wiki/FOSS)!\\n\\nThe source code is hosted at [Nixpkgs-db](https://github.com/kamadorueda/nixpkgs-db)  on GitHub.\\n\";","module.exports = \"This service was written with love!\\n\\nOne of the best ways to help me do more things like this is\\n[sponsoring me on Patreon](https://www.patreon.com/kamadorueda).\\n\\nEvery penny you contribute goes to support more\\n[FOSS](https://en.wikipedia.org/wiki/FOSS)\\ncontributions and cool stuff for the community.\\n\\nYou'll get my eternal gratitude for it!\\nand even if you do not, relax! there are other ways of [contributing](/nixpkgs-db/#/contributing).\\n\";"],"sourceRoot":""}