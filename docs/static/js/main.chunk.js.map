{"version":3,"sources":["components/ProgressBar.jsx","constants.jsx","hooks/fetch.jsx","views/Search.jsx","index.js"],"names":["ProgressBar","props","animated","label","now","Math","random","variant","stripped","DATA_SOURCE","NIXPKGS_SOURCE","useFetchJSON","url","defaultData","useState","data","setData","getAnswer","a","fetch","res","json","useEffect","filterPkgs","pkgs","pkgName","filter","pkg","includes","sort","Pkg","dataSource","values","Object","entries","b","sortByVersion","length","Card","Accordion","Toggle","as","Header","eventKey","lastVersion","lastData","Row","Col","sm","meta","homepage","href","rel","target","description","undefined","license","fullName","Collapse","Jumbotron","defaultActiveKey","revs","map","item","itemVersion","itemData","itemKey","Body","Text","Container","fluid","Results","page","setPage","setPkgName","matchingPackages","setMatchingPackages","pageStart","min","pageEnd","Fragment","InputGroup","Prepend","id","FormControl","aria-label","aria-describedby","defaultValue","onChange","event","value","Button","onClick","Pagination","Prev","disabled","Item","Next","slice","key","Alert","Search","Root","Navbar","Brand","Nav","Link","to","exact","path","component","ReactDOM","render","document","getElementById"],"mappings":"0SAGaA,EAAc,SAACC,GAAD,OACzB,kBAAC,IAAD,CACEC,UAAU,EACVC,MAAOF,EAAME,MACbC,IAAK,IAAMC,KAAKC,SAChBC,QAASN,EAAMM,QACfC,UAAU,KCTDC,EAAc,kEACdC,EAAiB,mC,yBCCjBC,EAAe,SAACC,EAAKC,GAAiB,IAAD,EACxBC,mBAASD,GADe,mBACzCE,EADyC,KACnCC,EADmC,KAG1CC,EAAS,uCAAG,4BAAAC,EAAA,sEACEC,MAAMP,GADR,cACVQ,EADU,YAEhBJ,EAFgB,SAEFI,EAAIC,OAFF,6EAAH,qDASf,OAJAC,qBAAU,WACRL,MACC,IAEIF,GCQHQ,EAAa,SAACC,EAAMC,GAAP,OACjBD,EAAKE,QAAO,SAACC,GAAD,OAASA,EAAIC,SAASH,MAAUI,QASxCC,EAAM,SAAC7B,GACX,IAAM0B,EAAM1B,EAAM0B,IAEZI,EAAU,UAAMtB,EAAN,sBAA+BkB,EAA/B,SACVZ,EAVc,SAACA,GACrB,IAAIiB,EAASC,OAAOC,QAAQnB,GAE5B,OADAiB,EAAOH,MAAK,SAACX,EAAGiB,GAAJ,OAAUjB,EAAE,GAAKiB,EAAE,GAAK,GAAK,KAClCH,EAOMI,CAAczB,EAAaoB,EAAY,KAEpD,GAAoB,IAAhBhB,EAAKsB,OACP,OACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAUC,OAAX,CAAkBC,GAAIH,IAAKI,OAAQnC,QAAQ,OAAOoC,SAAUhB,GAC1D,kBAAC,EAAD,CAAaxB,MAAM,aAAaI,QAAQ,WAIxC,IAAD,EACCqC,EAAc7B,EAAK,GAAG,GACtB8B,EAAW9B,EAAK,GAAG,GAEzB,OACE,kBAACuB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAUC,OAAX,CAAkBC,GAAIH,IAAKI,OAAQnC,QAAQ,OAAOoC,SAAUhB,GAC1D,kBAACmB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,GACP,2BAC8B,KAA3BH,EAASI,KAAKC,SAAkBvB,EAC/B,uBAAGwB,KAAMN,EAASI,KAAKC,SAAUE,IAAI,WAAWC,OAAO,SACpD1B,KAKT,kBAACoB,EAAA,EAAD,KAAMF,EAASI,KAAKK,aACpB,kBAACP,EAAA,EAAD,CAAKC,GAAI,GAAIjC,EAAKsB,QAClB,kBAACU,EAAA,EAAD,CAAKC,GAAI,QAC8BO,KAApC,UAAAV,EAASI,KAAKO,eAAd,eAAuBC,eACpBF,EACAV,EAASI,KAAKO,QAAQC,YAIhC,kBAAClB,EAAA,EAAUmB,SAAX,CAAoBf,SAAUhB,GAC5B,kBAACgC,EAAA,EAAD,KACE,kBAACpB,EAAA,EAAD,CAAWqB,iBAAgB,UAAKjC,EAAL,aAAaiB,EAAb,cAA8BC,EAASgB,KAAK,KACpE9C,EAAK+C,KAAI,SAACC,GACT,IAAMC,EAAcD,EAAK,GACnBE,EAAWF,EAAK,GAChBG,EAAO,UAAMvC,EAAN,aAAcqC,EAAd,cAA+BC,EAASJ,KAAK,IAE1D,OACE,kBAACvB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAUC,OAAX,CAAkBC,GAAIH,IAAKI,OAAQnC,QAAQ,OAAOoC,SAAUuB,GAC1D,uBAAGf,KAAMpB,EAAYqB,IAAI,WAAWC,OAAO,SACzC,2BAAI1B,EAAJ,KAAWqC,KAGf,kBAACzB,EAAA,EAAUmB,SAAX,CAAoBf,SAAUuB,GAC5B,kBAAC5B,EAAA,EAAK6B,KAAN,KACE,kBAAC7B,EAAA,EAAK8B,KAAN,KACE,kBAACC,EAAA,EAAD,CAAWC,OAAK,GACd,kBAACxB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,mCACI,wCADJ,OACyBpB,EADzB,yBAC6CjB,EAD7C,oBACuEuD,EAASJ,KAAK,GADrF,cAKJ,kBAACf,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,mCACI,sCADJ,OACuBpB,EADvB,iBACmCjB,EADnC,oBAC6DuD,EAASJ,KAAK,GAD3E,2BAoB1BU,EAAU,SAACtE,GACf,IAAMuB,EAAOvB,EAAMuB,KACbqC,EAAO5D,EAAM4D,KAFM,EAID/C,mBAAS,GAJR,mBAIlB0D,EAJkB,KAIZC,EAJY,OAKK3D,mBA1GP,IAqGE,mBAKlBW,EALkB,KAKTiD,EALS,OAMuB5D,mBAASS,EAAWC,EA3G7C,KAqGE,mBAMlBmD,EANkB,KAMAC,EANA,KAwBnBC,EAAYxE,KAAKyE,IAAI,EA5HJ,IA4HSN,EAAO,GAAuBG,EAAiBtC,QACzE0C,EAAU1E,KAAKyE,IA7HE,GA6HEN,EAAyBG,EAAiBtC,QAEnE,OACE,kBAAC,IAAM2C,SAAP,KACE,kBAAClC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,GACP,kBAACiC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAWC,QAAZ,KACE,kBAACD,EAAA,EAAWb,KAAZ,CAAiBe,GAAG,WAApB,iBAEF,kBAACC,EAAA,EAAD,CACEC,aAAW,UACXC,mBAAiB,UACjBC,aA3IW,GA4IXC,SA/BY,SAACC,GACvBf,EAAWe,EAAMpC,OAAOqC,UAgChB,kBAACC,EAAA,EAAD,CAAQC,QA7BU,WAC1BnB,EAAQ,GACRG,EAAoBrD,EAAWC,EAAMC,KA2BSlB,QAAQ,mBAA9C,YAKJ,kBAACwC,EAAA,EAAD,CAAKC,GAAI,GACP,kBAAC6C,EAAA,EAAD,KACE,kBAACA,EAAA,EAAWC,KAAZ,CACEC,SAAmB,IAATvB,EACVoB,QAjCkB,WAC5BnB,EAAQD,EAAO,MAkCP,kBAACqB,EAAA,EAAWG,KAAZ,CAAiBD,UAAU,GAA3B,oBACoBlB,EADpB,IACgCE,EADhC,OAC6CJ,EAAiBtC,QAE9D,kBAACwD,EAAA,EAAWI,KAAZ,CACEF,SA5JW,GA4JDvB,EAA0BG,EAAiBtC,OACrDuD,QArCc,WACxBnB,EAAQD,EAAO,SA0Cb,kBAAC1B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,IACP,kBAACT,EAAA,EAAD,CAAWqB,iBAAkBe,EAAiB,IAC5C,kBAACrC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAUC,OAAX,CAAkBC,GAAIH,IAAKI,OAAQnC,QAAQ,QACzC,kBAACuC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,GAAG,yCACZ,kBAACD,EAAA,EAAD,KAAK,2CACL,kBAACA,EAAA,EAAD,CAAKC,GAAI,GAAG,wCACZ,kBAACD,EAAA,EAAD,CAAKC,GAAI,GAAG,0CAIjB2B,EACEuB,MAAMrB,EAAY,EAAGE,GACrBjB,KAAI,SAACnC,GAAD,OAAS,kBAAC,EAAD,CAAKwE,IAAKxE,EAAKA,IAAKA,UAK1C,kBAACmB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,IACP,kBAACoD,EAAA,EAAD,CAAO7F,QAAQ,SAAf,cACciB,EAAKa,OADnB,iBACyCwB,EAAKxB,OAD9C,8BACgF,6BADhF,6CAUGgE,EAAS,WACpB,IAAM7E,EAAOb,EAAa,GAAD,OAAIF,EAAJ,mBAAkC,IACrDoD,EAAOlD,EAAa,GAAD,OAAIF,EAAJ,mBAAkC,IAE3D,OACE,kBAAC,IAAMuE,SAAP,KACmB,IAAhBxD,EAAKa,OACJ,kBAAC,EAAD,CAAalC,MAAM,aAAaI,QAAQ,SAExC,kBAAC,EAAD,CAASiB,KAAMA,EAAMqC,KAAMA,MC7M7ByC,EAAO,kBACX,kBAAC,IAAMtB,SAAP,KACE,kBAAC,IAAD,KACE,kBAACuB,EAAA,EAAD,KACE,kBAACA,EAAA,EAAOC,MAAR,KACE,iDACA,2GAIJ,kBAACnC,EAAA,EAAD,CAAWC,OAAO,GAChB,kBAACxB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,IACP,kBAACyD,EAAA,EAAD,CAAKlG,QAAQ,QACX,kBAACkG,EAAA,EAAIT,KAAL,KACE,kBAACS,EAAA,EAAIC,KAAL,KACE,kBAAC,IAAD,CAAMC,GAAG,KAAT,YAGJ,kBAACF,EAAA,EAAIT,KAAL,KACE,kBAACS,EAAA,EAAIC,KAAL,KACE,kBAAC,IAAD,CAAMC,GAAG,UAAT,WAGJ,kBAACF,EAAA,EAAIT,KAAL,KACE,kBAACS,EAAA,EAAIC,KAAL,KACE,kBAAC,IAAD,CAAMC,GAAG,iBAAT,qBAMV,6BACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAO,EAAMC,KAAK,IAAIC,UAAWT,IACxC,kBAAC,IAAD,CAAOO,OAAO,EAAMC,KAAK,UAAzB,OACA,kBAAC,IAAD,CAAOD,OAAO,EAAMC,KAAK,iBAAzB,YAOVE,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.chunk.js","sourcesContent":["import React from 'react';\nimport { ProgressBar as BootstrapProgressBar } from 'react-bootstrap';\n\nexport const ProgressBar = (props) => (\n  <BootstrapProgressBar\n    animated={true}\n    label={props.label}\n    now={100 * Math.random()}\n    variant={props.variant}\n    stripped={true}\n  />\n)\n","export const DATA_SOURCE = 'https://raw.githubusercontent.com/kamadorueda/nixpkgs-db/latest'\nexport const NIXPKGS_SOURCE = 'https://github.com/NixOS/nixpkgs'\n","import { useEffect, useState } from 'react';\n\nexport const useFetchJSON = (url, defaultData) => {\n  const [data, setData] = useState(defaultData);\n\n  const getAnswer = async () => {\n    const res = await fetch(url);\n    setData(await res.json());\n  };\n\n  useEffect(() => {\n    getAnswer();\n  }, []);\n\n  return data;\n}\n","import React, { useState } from 'react';\nimport {\n  Accordion,\n  Alert,\n  Button,\n  Card,\n  Col,\n  Container,\n  FormControl,\n  InputGroup,\n  Jumbotron,\n  Pagination,\n  Row,\n} from 'react-bootstrap';\n\nimport { ProgressBar } from '../components/ProgressBar';\nimport { DATA_SOURCE, NIXPKGS_SOURCE } from '../constants';\nimport { useFetchJSON } from '../hooks/fetch';\n\nconst DEFAULT_PKG_NAME = \"\";\nconst RESULTS_PER_PAGE = 10;\n\nconst filterPkgs = (pkgs, pkgName) => (\n  pkgs.filter((pkg) => pkg.includes(pkgName)).sort()\n);\n\nconst sortByVersion = (data) => {\n  var values = Object.entries(data);\n  values.sort((a, b) => a[0] < b[0] ? 1 : -1);\n  return values;\n};\n\nconst Pkg = (props) => {\n  const pkg = props.pkg;\n\n  const dataSource = `${DATA_SOURCE}/data/pkgs/${pkg}.json`;\n  const data = sortByVersion(useFetchJSON(dataSource, {}));\n\n  if (data.length === 0) {\n    return (\n      <Card>\n        <Accordion.Toggle as={Card.Header} variant=\"link\" eventKey={pkg}>\n          <ProgressBar label=\"Loading...\" variant=\"info\" />\n        </Accordion.Toggle>\n      </Card>\n    );\n  } else {\n    const lastVersion = data[0][0];\n    const lastData = data[0][1];\n\n    return (\n      <Card>\n        <Accordion.Toggle as={Card.Header} variant=\"link\" eventKey={pkg}>\n          <Row>\n            <Col sm={3}>\n              <b>\n                {lastData.meta.homepage === \"\" ? pkg : (\n                  <a href={lastData.meta.homepage} rel=\"noopener\" target=\"blank\">\n                    {pkg}\n                  </a>\n                )}\n              </b>\n            </Col>\n            <Col>{lastData.meta.description}</Col>\n            <Col sm={1}>{data.length}</Col>\n            <Col sm={2}>\n              {lastData.meta.license?.fullName === undefined\n                ? undefined\n                : lastData.meta.license.fullName}\n            </Col>\n          </Row>\n        </Accordion.Toggle>\n        <Accordion.Collapse eventKey={pkg}>\n          <Jumbotron>\n            <Accordion defaultActiveKey={`${pkg} v${lastVersion} @ ${lastData.revs[1]}`}>\n              {data.map((item) => {\n                const itemVersion = item[0];\n                const itemData = item[1];\n                const itemKey = `${pkg} v${itemVersion} @ ${itemData.revs[1]}`;\n\n                return (\n                  <Card>\n                    <Accordion.Toggle as={Card.Header} variant=\"link\" eventKey={itemKey}>\n                      <a href={dataSource} rel=\"noopener\" target=\"blank\">\n                        <b>{pkg} v{itemVersion}</b>\n                      </a>\n                    </Accordion.Toggle>\n                    <Accordion.Collapse eventKey={itemKey}>\n                      <Card.Body>\n                        <Card.Text>\n                          <Container fluid>\n                            <Row>\n                              <Col>\n                                <code>\n                                  $ <b>nix-shell</b> -p {pkg} -I nixpkgs={`${NIXPKGS_SOURCE}/archive/${itemData.revs[1]}.tar.gz`}\n                                </code>\n                              </Col>\n                            </Row>\n                            <Row>\n                              <Col>\n                                <code>\n                                  $ <b>nix-env</b> -i {pkg} -f {`${NIXPKGS_SOURCE}/archive/${itemData.revs[1]}.tar.gz`}\n                                </code>\n                              </Col>\n                            </Row>\n                          </Container>\n                        </Card.Text>\n                      </Card.Body>\n                    </Accordion.Collapse>\n                  </Card>\n                );\n              })}\n            </Accordion>\n          </Jumbotron>\n        </Accordion.Collapse>\n      </Card>\n    );\n  }\n}\n\nconst Results = (props) => {\n  const pkgs = props.pkgs;\n  const revs = props.revs;\n\n  const [page, setPage] = useState(1);\n  const [pkgName, setPkgName] = useState(DEFAULT_PKG_NAME);\n  const [matchingPackages, setMatchingPackages] = useState(filterPkgs(pkgs, DEFAULT_PKG_NAME));\n\n  const onPkgNameChange = (event) => {\n    setPkgName(event.target.value);\n  };\n\n  const onSearchButtonClick = () => {\n    setPage(1);\n    setMatchingPackages(filterPkgs(pkgs, pkgName));\n  };\n\n  const onPreviousButtonClick = () => {\n    setPage(page - 1);\n  };\n  const onNextButtonClick = () => {\n    setPage(page + 1);\n  };\n\n  const pageStart = Math.min(1 + (page - 1) * RESULTS_PER_PAGE, matchingPackages.length);\n  const pageEnd = Math.min(page * RESULTS_PER_PAGE, matchingPackages.length);\n\n  return (\n    <React.Fragment>\n      <Row>\n        <Col sm={6}>\n          <InputGroup>\n            <InputGroup.Prepend>\n              <InputGroup.Text id=\"pkgName\">Package name</InputGroup.Text>\n            </InputGroup.Prepend>\n            <FormControl\n              aria-label=\"pkgName\"\n              aria-describedby=\"pkgName\"\n              defaultValue={DEFAULT_PKG_NAME}\n              onChange={onPkgNameChange}\n            />\n            <Button onClick={onSearchButtonClick} variant=\"outline-primary\" >\n              Search\n            </Button>\n          </InputGroup>\n        </Col>\n        <Col sm={6}>\n          <Pagination>\n            <Pagination.Prev\n              disabled={page === 1}\n              onClick={onPreviousButtonClick}\n            />\n            <Pagination.Item disabled={true}>\n              Showing packages {pageStart}-{pageEnd} of {matchingPackages.length}\n            </Pagination.Item>\n            <Pagination.Next\n              disabled={page * RESULTS_PER_PAGE > matchingPackages.length}\n              onClick={onNextButtonClick}\n            />\n          </Pagination>\n        </Col>\n      </Row>\n\n      <Row>\n        <Col sm={12}>\n          <Accordion defaultActiveKey={matchingPackages[0]}>\n            <Card>\n              <Accordion.Toggle as={Card.Header} variant=\"dark\">\n                <Row>\n                  <Col sm={3}><b>Attribute</b></Col>\n                  <Col><b>Description</b></Col>\n                  <Col sm={1}><b>Versions</b></Col>\n                  <Col sm={2}><b>License</b></Col>\n                </Row>\n              </Accordion.Toggle>\n            </Card>\n            {matchingPackages\n              .slice(pageStart - 1, pageEnd)\n              .map((pkg) => <Pkg key={pkg} pkg={pkg} />)}\n          </Accordion>\n        </Col>\n      </Row>\n\n      <Row>\n        <Col sm={12}>\n          <Alert variant=\"light\">\n            A total of {pkgs.length} packages and {revs.length} commits put in your hands <br />\n            Created and maintained by Kevin Amado\n          </Alert>\n        </Col>\n      </Row>\n    </React.Fragment>\n  );\n}\n\nexport const Search = () => {\n  const pkgs = useFetchJSON(`${DATA_SOURCE}/data/pkgs.json`, []);\n  const revs = useFetchJSON(`${DATA_SOURCE}/data/revs.json`, []);\n\n  return (\n    <React.Fragment>\n      {pkgs.length === 0 ? (\n        <ProgressBar label=\"Loading...\" variant=\"info\" />\n      ) : (\n        <Results pkgs={pkgs} revs={revs} />\n      )}\n    </React.Fragment>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  Col,\n  Container,\n  Nav,\n  Navbar,\n  Row,\n} from 'react-bootstrap';\nimport {\n  HashRouter,\n  Link,\n  Route,\n  Switch,\n} from \"react-router-dom\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport { Search } from './views/Search';\n\nconst Root = () => (\n  <React.Fragment>\n    <HashRouter>\n      <Navbar>\n        <Navbar.Brand>\n          <h1>Nixpkgs Database!</h1>\n          <h5>A database with packages from all versions, all commits and all channels.</h5>\n        </Navbar.Brand>\n      </Navbar>\n\n      <Container fluid={true}>\n        <Row>\n          <Col sm={12}>\n            <Nav variant=\"tabs\">\n              <Nav.Item>\n                <Nav.Link>\n                  <Link to=\"/\">Search</Link>\n                </Nav.Link>\n              </Nav.Item>\n              <Nav.Item>\n                <Nav.Link>\n                  <Link to=\"/about\">About</Link>\n                </Nav.Link>\n              </Nav.Item>\n              <Nav.Item>\n                <Nav.Link>\n                  <Link to=\"/contributing\">Contributing</Link>\n                </Nav.Link>\n              </Nav.Item>\n            </Nav>\n          </Col>\n        </Row>\n        <br />\n        <Switch>\n          <Route exact={true} path=\"/\" component={Search} />\n          <Route exact={true} path=\"/about\">...</Route>\n          <Route exact={true} path=\"/contributing\">...</Route>\n        </Switch>\n      </Container>\n    </HashRouter>\n  </React.Fragment>\n);\n\nReactDOM.render(\n  <Root />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}