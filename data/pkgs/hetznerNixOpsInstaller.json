{
 "": {
  "meta": {
   "description": "Basic Nix bootstrap installer for NixOps",
   "homepage": "",
   "license": null,
   "long_description": "It works like this:\n\nPreapare a base image with reference graph, which is to be copied over to\nthe mount point and contains wrappers for the system outside the mount\npoint. Those wrappers basically just chroot into the mountpoint path and\nexecute the corresponding counterparts over there. The base derivation\nitself only contains everything necessary in order to get a Nix\nbootstrapped, like Nix itself and a shell linked to /mnt/bin/sh.\n\nFrom outside the mountpoint, we just provide a small derivation which\ncontains a partitioner, an activate-remote and a script which is the\noutput of this derivation. In detail:\n\n$out: Creates a tarball of of the full closure of the base derivation and\n      its reference information, the partitioner and activate-remote. The\n      script outputs the tarball on stdout, so it's easy for NixOps to\n      pipe it to the remote system.\n\nactivate-remote: Copies the base derivation into /mnt and registers it\n                 with the Nix database. Afterwards, it creates the\n                 mentioned chroot wrappers and puts them into /usr/bin\n                 (remember, we're on a non-NixOS system here), together\n                 with the partitioner.\n",
   "maintainers": [
    "aszlig <aszlig@redmoonstudios.org>"
   ],
   "name": "hetzner-nixops-installer",
   "platforms": [
    "i686-linux",
    "x86_64-linux",
    "powerpc-linux",
    "armv5tel-linux",
    "armv7l-linux",
    "mips64el-linux",
    "x86_64-darwin",
    "i686-cygwin",
    "i686-freebsd",
    "x86_64-freebsd",
    "powerpc-freebsd",
    "i686-openbsd",
    "x86_64-openbsd"
   ],
   "position": ""
  },
  "revs": [
   "0024926701875c6cac245281f07d899f2ee14d92",
   "025995edafc2001d4c7cabbc2cd09d83b606b65e"
  ]
 }
}