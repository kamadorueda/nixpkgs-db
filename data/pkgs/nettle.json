{
 "2.0": {
  "meta": {
   "description": "GNU Nettle, a cryptographic library",
   "homepage": "http://www.lysator.liu.se/~nisse/nettle/",
   "license": "GPLv2+",
   "long_description": "Nettle is a cryptographic library that is designed to fit\neasily in more or less any context: In crypto toolkits for\nobject-oriented languages (C++, Python, Pike, ...), in\napplications like LSH or GNUPG, or even in kernel space.  In\nmost contexts, you need more than the basic cryptographic\nalgorithms, you also need some way to keep track of available\nalgorithms, their properties and variants.  You often have\nsome algorithm selection process, often dictated by a protocol\nyou want to implement.\n\nAnd as the requirements of applications differ in subtle and\nnot so subtle ways, an API that fits one application well can\nbe a pain to use in a different context.  And that is why\nthere are so many different cryptographic libraries around.\n\nNettle tries to avoid this problem by doing one thing, the\nlow-level crypto stuff, and providing a simple but general\ninterface to it.  In particular, Nettle doesn't do algorithm\nselection.  It doesn't do memory allocation. It doesn't do any\nI/O.\n",
   "maintainers": [
    "Ludovic Court\u00e8s <ludo@gnu.org>"
   ],
   "name": "nettle",
   "platforms": null,
   "position": ""
  },
  "revs": [
   "000c2c51fdfffcd0b0cc91011d53080bf1f6513c",
   "000c2c51fdfffcd0b0cc91011d53080bf1f6513c"
  ]
 },
 "2.1": {
  "meta": {
   "description": "GNU Nettle, a cryptographic library",
   "homepage": "http://www.lysator.liu.se/~nisse/nettle/",
   "license": "GPLv2+",
   "long_description": "Nettle is a cryptographic library that is designed to fit\neasily in more or less any context: In crypto toolkits for\nobject-oriented languages (C++, Python, Pike, ...), in\napplications like LSH or GNUPG, or even in kernel space.  In\nmost contexts, you need more than the basic cryptographic\nalgorithms, you also need some way to keep track of available\nalgorithms, their properties and variants.  You often have\nsome algorithm selection process, often dictated by a protocol\nyou want to implement.\n\nAnd as the requirements of applications differ in subtle and\nnot so subtle ways, an API that fits one application well can\nbe a pain to use in a different context.  And that is why\nthere are so many different cryptographic libraries around.\n\nNettle tries to avoid this problem by doing one thing, the\nlow-level crypto stuff, and providing a simple but general\ninterface to it.  In particular, Nettle doesn't do algorithm\nselection.  It doesn't do memory allocation. It doesn't do any\nI/O.\n",
   "maintainers": [
    "Ludovic Court\u00e8s <ludo@gnu.org>"
   ],
   "name": "nettle",
   "platforms": [
    "i686-linux",
    "x86_64-linux",
    "powerpc-linux",
    "armv5tel-linux",
    "mips64-linux",
    "i686-darwin",
    "powerpc-darwin",
    "x86_64-darwin",
    "i686-cygwin",
    "i686-freebsd",
    "x86_64-freebsd",
    "powerpc-freebsd",
    "i686-openbsd",
    "x86_64-openbsd"
   ],
   "position": ""
  },
  "revs": [
   "0003f76f9b29d92ce7acb8e3f35f3805c91687d6",
   "0003f76f9b29d92ce7acb8e3f35f3805c91687d6"
  ]
 },
 "2.4": {
  "meta": {
   "description": "GNU Nettle, a cryptographic library",
   "homepage": "http://www.lysator.liu.se/~nisse/nettle/",
   "license": "GPLv2+",
   "long_description": "Nettle is a cryptographic library that is designed to fit\neasily in more or less any context: In crypto toolkits for\nobject-oriented languages (C++, Python, Pike, ...), in\napplications like LSH or GNUPG, or even in kernel space.  In\nmost contexts, you need more than the basic cryptographic\nalgorithms, you also need some way to keep track of available\nalgorithms, their properties and variants.  You often have\nsome algorithm selection process, often dictated by a protocol\nyou want to implement.\n\nAnd as the requirements of applications differ in subtle and\nnot so subtle ways, an API that fits one application well can\nbe a pain to use in a different context.  And that is why\nthere are so many different cryptographic libraries around.\n\nNettle tries to avoid this problem by doing one thing, the\nlow-level crypto stuff, and providing a simple but general\ninterface to it.  In particular, Nettle doesn't do algorithm\nselection.  It doesn't do memory allocation. It doesn't do any\nI/O.\n",
   "maintainers": [
    "Ludovic Court\u00e8s <ludo@gnu.org>"
   ],
   "name": "nettle",
   "platforms": [
    "i686-linux",
    "x86_64-linux",
    "powerpc-linux",
    "armv5tel-linux",
    "mips64el-linux",
    "i686-darwin",
    "powerpc-darwin",
    "x86_64-darwin",
    "i686-cygwin",
    "i686-freebsd",
    "x86_64-freebsd",
    "powerpc-freebsd",
    "i686-openbsd",
    "x86_64-openbsd"
   ],
   "position": ""
  },
  "revs": [
   "000051b196b82d30d1008c8999502c484ea5bd7d",
   "000791e74a511f862081aff90ab27304c88f0aba"
  ]
 },
 "2.5": {
  "meta": {
   "description": "GNU Nettle, a cryptographic library",
   "homepage": "http://www.lysator.liu.se/~nisse/nettle/",
   "license": "GPLv2+",
   "long_description": "Nettle is a cryptographic library that is designed to fit\neasily in more or less any context: In crypto toolkits for\nobject-oriented languages (C++, Python, Pike, ...), in\napplications like LSH or GNUPG, or even in kernel space.  In\nmost contexts, you need more than the basic cryptographic\nalgorithms, you also need some way to keep track of available\nalgorithms, their properties and variants.  You often have\nsome algorithm selection process, often dictated by a protocol\nyou want to implement.\n\nAnd as the requirements of applications differ in subtle and\nnot so subtle ways, an API that fits one application well can\nbe a pain to use in a different context.  And that is why\nthere are so many different cryptographic libraries around.\n\nNettle tries to avoid this problem by doing one thing, the\nlow-level crypto stuff, and providing a simple but general\ninterface to it.  In particular, Nettle doesn't do algorithm\nselection.  It doesn't do memory allocation. It doesn't do any\nI/O.\n",
   "maintainers": [
    "Ludovic Court\u00e8s <ludo@gnu.org>"
   ],
   "name": "nettle",
   "platforms": [
    "i686-linux",
    "x86_64-linux",
    "powerpc-linux",
    "armv5tel-linux",
    "armv7l-linux",
    "mips64el-linux",
    "x86_64-darwin",
    "i686-cygwin",
    "i686-freebsd",
    "x86_64-freebsd",
    "powerpc-freebsd",
    "i686-openbsd",
    "x86_64-openbsd"
   ],
   "position": ""
  },
  "revs": [
   "000fddd10e079f147769f686e5661bd6d7c1db5a",
   "0025b681c69bf7021d00e93cde1d53ec16f3c6e1"
  ]
 },
 "2.7.1": {
  "meta": {
   "description": "Cryptographic library",
   "homepage": "http://www.lysator.liu.se/~nisse/nettle/",
   "license": {
    "fullName": "GNU General Public License v2.0 or later",
    "shortName": "GPL-2.0+",
    "url": "http://spdx.org/licenses/GPL-2.0+"
   },
   "long_description": "Nettle is a cryptographic library that is designed to fit\neasily in more or less any context: In crypto toolkits for\nobject-oriented languages (C++, Python, Pike, ...), in\napplications like LSH or GNUPG, or even in kernel space.  In\nmost contexts, you need more than the basic cryptographic\nalgorithms, you also need some way to keep track of available\nalgorithms, their properties and variants.  You often have\nsome algorithm selection process, often dictated by a protocol\nyou want to implement.\n\nAnd as the requirements of applications differ in subtle and\nnot so subtle ways, an API that fits one application well can\nbe a pain to use in a different context.  And that is why\nthere are so many different cryptographic libraries around.\n\nNettle tries to avoid this problem by doing one thing, the\nlow-level crypto stuff, and providing a simple but general\ninterface to it.  In particular, Nettle doesn't do algorithm\nselection.  It doesn't do memory allocation. It doesn't do any\nI/O.\n",
   "maintainers": [
    "Ludovic Court\u00e8s <ludo@gnu.org>"
   ],
   "name": "nettle",
   "platforms": [
    "i686-linux",
    "x86_64-linux",
    "armv5tel-linux",
    "armv7l-linux",
    "mips64el-linux",
    "x86_64-darwin",
    "i686-cygwin",
    "i686-freebsd",
    "x86_64-freebsd",
    "i686-openbsd",
    "x86_64-openbsd"
   ],
   "position": "pkgs/development/libraries/nettle/default.nix:25"
  },
  "revs": [
   "0005e1896d9bdef48aedcff9e86843351ac024e9",
   "001d4d07cd51ac2ba7b1f4658c3c37b7da2579e4"
  ]
 },
 "3.0": {
  "meta": {
   "description": "Cryptographic library",
   "homepage": "http://www.lysator.liu.se/~nisse/nettle/",
   "license": {
    "fullName": "GNU General Public License v2.0 or later",
    "shortName": "gpl2Plus",
    "spdxId": "GPL-2.0+",
    "url": "http://spdx.org/licenses/GPL-2.0+"
   },
   "long_description": "Nettle is a cryptographic library that is designed to fit\neasily in more or less any context: In crypto toolkits for\nobject-oriented languages (C++, Python, Pike, ...), in\napplications like LSH or GNUPG, or even in kernel space.  In\nmost contexts, you need more than the basic cryptographic\nalgorithms, you also need some way to keep track of available\nalgorithms, their properties and variants.  You often have\nsome algorithm selection process, often dictated by a protocol\nyou want to implement.\n\nAnd as the requirements of applications differ in subtle and\nnot so subtle ways, an API that fits one application well can\nbe a pain to use in a different context.  And that is why\nthere are so many different cryptographic libraries around.\n\nNettle tries to avoid this problem by doing one thing, the\nlow-level crypto stuff, and providing a simple but general\ninterface to it.  In particular, Nettle doesn't do algorithm\nselection.  It doesn't do memory allocation. It doesn't do any\nI/O.\n",
   "maintainers": [],
   "name": "nettle",
   "platforms": [
    "i686-linux",
    "x86_64-linux",
    "armv5tel-linux",
    "armv6l-linux",
    "armv7l-linux",
    "mips64el-linux",
    "x86_64-darwin",
    "i686-cygwin",
    "x86_64-cygwin",
    "i686-freebsd",
    "x86_64-freebsd",
    "i686-openbsd",
    "x86_64-openbsd"
   ],
   "position": "pkgs/development/libraries/nettle/generic.nix:26"
  },
  "revs": [
   "001ea3b455c9c1eca44210dac25eb09ca4b7f908",
   "00230c92402bb3d94eae0db63cd6d2ba237b541f"
  ]
 },
 "3.1.1": {
  "meta": {
   "description": "Cryptographic library",
   "homepage": "http://www.lysator.liu.se/~nisse/nettle/",
   "license": {
    "fullName": "GNU General Public License v2.0 or later",
    "shortName": "gpl2Plus",
    "spdxId": "GPL-2.0+",
    "url": "http://spdx.org/licenses/GPL-2.0+"
   },
   "long_description": "Nettle is a cryptographic library that is designed to fit\neasily in more or less any context: In crypto toolkits for\nobject-oriented languages (C++, Python, Pike, ...), in\napplications like LSH or GNUPG, or even in kernel space.  In\nmost contexts, you need more than the basic cryptographic\nalgorithms, you also need some way to keep track of available\nalgorithms, their properties and variants.  You often have\nsome algorithm selection process, often dictated by a protocol\nyou want to implement.\n\nAnd as the requirements of applications differ in subtle and\nnot so subtle ways, an API that fits one application well can\nbe a pain to use in a different context.  And that is why\nthere are so many different cryptographic libraries around.\n\nNettle tries to avoid this problem by doing one thing, the\nlow-level crypto stuff, and providing a simple but general\ninterface to it.  In particular, Nettle doesn't do algorithm\nselection.  It doesn't do memory allocation. It doesn't do any\nI/O.\n",
   "maintainers": [
    "William A. Kennington III <william@wkennington.com>"
   ],
   "name": "nettle",
   "platforms": [
    "i686-linux",
    "x86_64-linux",
    "armv5tel-linux",
    "armv6l-linux",
    "armv7l-linux",
    "mips64el-linux",
    "x86_64-darwin",
    "i686-cygwin",
    "x86_64-cygwin",
    "i686-freebsd",
    "x86_64-freebsd",
    "i686-openbsd",
    "x86_64-openbsd",
    "i686-netbsd",
    "x86_64-netbsd",
    "x86_64-solaris"
   ],
   "position": "pkgs/development/libraries/nettle/generic.nix:26"
  },
  "revs": [
   "0000d4029e264262dcf45a822ccf3b48bcacf209",
   "001d314e874e7fcf819847f88051346684d22e32"
  ]
 },
 "3.2": {
  "meta": {
   "description": "Cryptographic library",
   "homepage": "http://www.lysator.liu.se/~nisse/nettle/",
   "license": {
    "fullName": "GNU General Public License v2.0 or later",
    "shortName": "gpl2Plus",
    "spdxId": "GPL-2.0+",
    "url": "http://spdx.org/licenses/GPL-2.0+"
   },
   "long_description": "Nettle is a cryptographic library that is designed to fit\neasily in more or less any context: In crypto toolkits for\nobject-oriented languages (C++, Python, Pike, ...), in\napplications like LSH or GNUPG, or even in kernel space.  In\nmost contexts, you need more than the basic cryptographic\nalgorithms, you also need some way to keep track of available\nalgorithms, their properties and variants.  You often have\nsome algorithm selection process, often dictated by a protocol\nyou want to implement.\n\nAnd as the requirements of applications differ in subtle and\nnot so subtle ways, an API that fits one application well can\nbe a pain to use in a different context.  And that is why\nthere are so many different cryptographic libraries around.\n\nNettle tries to avoid this problem by doing one thing, the\nlow-level crypto stuff, and providing a simple but general\ninterface to it.  In particular, Nettle doesn't do algorithm\nselection.  It doesn't do memory allocation. It doesn't do any\nI/O.\n",
   "maintainers": [
    "William A. Kennington III <william@wkennington.com>"
   ],
   "name": "nettle",
   "platforms": [
    "i686-linux",
    "x86_64-linux",
    "armv5tel-linux",
    "armv6l-linux",
    "armv7l-linux",
    "mips64el-linux",
    "x86_64-darwin",
    "i686-cygwin",
    "x86_64-cygwin",
    "i686-freebsd",
    "x86_64-freebsd",
    "i686-openbsd",
    "x86_64-openbsd",
    "i686-netbsd",
    "x86_64-netbsd",
    "x86_64-solaris"
   ],
   "position": "pkgs/development/libraries/nettle/generic.nix:26"
  },
  "revs": [
   "0018599a26747abc03457cf67c8cbc5d351661a3",
   "0018599a26747abc03457cf67c8cbc5d351661a3"
  ]
 },
 "3.3": {
  "meta": {
   "description": "Cryptographic library",
   "homepage": "http://www.lysator.liu.se/~nisse/nettle/",
   "license": {
    "fullName": "GNU General Public License v2.0 or later",
    "shortName": "gpl2Plus",
    "spdxId": "GPL-2.0+",
    "url": "http://spdx.org/licenses/GPL-2.0+"
   },
   "long_description": "Nettle is a cryptographic library that is designed to fit\neasily in more or less any context: In crypto toolkits for\nobject-oriented languages (C++, Python, Pike, ...), in\napplications like LSH or GNUPG, or even in kernel space.  In\nmost contexts, you need more than the basic cryptographic\nalgorithms, you also need some way to keep track of available\nalgorithms, their properties and variants.  You often have\nsome algorithm selection process, often dictated by a protocol\nyou want to implement.\n\nAnd as the requirements of applications differ in subtle and\nnot so subtle ways, an API that fits one application well can\nbe a pain to use in a different context.  And that is why\nthere are so many different cryptographic libraries around.\n\nNettle tries to avoid this problem by doing one thing, the\nlow-level crypto stuff, and providing a simple but general\ninterface to it.  In particular, Nettle doesn't do algorithm\nselection.  It doesn't do memory allocation. It doesn't do any\nI/O.\n",
   "maintainers": [
    "William A. Kennington III <william@wkennington.com>"
   ],
   "name": "nettle",
   "platforms": [
    "aarch64-linux",
    "armv5tel-linux",
    "armv6l-linux",
    "armv7l-linux",
    "mips64el-linux",
    "i686-cygwin",
    "i686-freebsd",
    "i686-linux",
    "i686-netbsd",
    "i686-openbsd",
    "x86_64-cygwin",
    "x86_64-darwin",
    "x86_64-freebsd",
    "x86_64-linux",
    "x86_64-netbsd",
    "x86_64-openbsd",
    "x86_64-solaris"
   ],
   "position": "pkgs/development/libraries/nettle/generic.nix:26"
  },
  "revs": [
   "00056e76d0a5c1c05d7ad1064702b3d121cd1b98",
   "00056e76d0a5c1c05d7ad1064702b3d121cd1b98"
  ]
 },
 "3.4": {
  "meta": {
   "description": "Cryptographic library",
   "homepage": "http://www.lysator.liu.se/~nisse/nettle/",
   "license": {
    "fullName": "GNU General Public License v2.0 or later",
    "shortName": "gpl2Plus",
    "spdxId": "GPL-2.0+",
    "url": "http://spdx.org/licenses/GPL-2.0+.html"
   },
   "long_description": "Nettle is a cryptographic library that is designed to fit\neasily in more or less any context: In crypto toolkits for\nobject-oriented languages (C++, Python, Pike, ...), in\napplications like LSH or GNUPG, or even in kernel space.  In\nmost contexts, you need more than the basic cryptographic\nalgorithms, you also need some way to keep track of available\nalgorithms, their properties and variants.  You often have\nsome algorithm selection process, often dictated by a protocol\nyou want to implement.\n\nAnd as the requirements of applications differ in subtle and\nnot so subtle ways, an API that fits one application well can\nbe a pain to use in a different context.  And that is why\nthere are so many different cryptographic libraries around.\n\nNettle tries to avoid this problem by doing one thing, the\nlow-level crypto stuff, and providing a simple but general\ninterface to it.  In particular, Nettle doesn't do algorithm\nselection.  It doesn't do memory allocation. It doesn't do any\nI/O.\n",
   "maintainers": [
    {
     "email": "william@wkennington.com",
     "github": "wkennington",
     "name": "William A. Kennington III"
    }
   ],
   "name": "nettle",
   "platforms": [
    {}
   ],
   "position": "pkgs/development/libraries/nettle/generic.nix:27"
  },
  "revs": [
   "00005ce0bdbc3c13804adc9a7fd71a02cc0b8db2",
   "00005ce0bdbc3c13804adc9a7fd71a02cc0b8db2"
  ]
 },
 "3.4.1": {
  "meta": {
   "description": "Cryptographic library",
   "homepage": "http://www.lysator.liu.se/~nisse/nettle/",
   "license": {
    "fullName": "GNU General Public License v2.0 or later",
    "shortName": "gpl2Plus",
    "spdxId": "GPL-2.0-or-later",
    "url": "http://spdx.org/licenses/GPL-2.0-or-later.html"
   },
   "long_description": "Nettle is a cryptographic library that is designed to fit\neasily in more or less any context: In crypto toolkits for\nobject-oriented languages (C++, Python, Pike, ...), in\napplications like LSH or GNUPG, or even in kernel space.  In\nmost contexts, you need more than the basic cryptographic\nalgorithms, you also need some way to keep track of available\nalgorithms, their properties and variants.  You often have\nsome algorithm selection process, often dictated by a protocol\nyou want to implement.\n\nAnd as the requirements of applications differ in subtle and\nnot so subtle ways, an API that fits one application well can\nbe a pain to use in a different context.  And that is why\nthere are so many different cryptographic libraries around.\n\nNettle tries to avoid this problem by doing one thing, the\nlow-level crypto stuff, and providing a simple but general\ninterface to it.  In particular, Nettle doesn't do algorithm\nselection.  It doesn't do memory allocation. It doesn't do any\nI/O.\n",
   "maintainers": [],
   "name": "nettle",
   "platforms": [
    {}
   ],
   "position": "pkgs/development/libraries/nettle/generic.nix:27"
  },
  "revs": [
   "0000a86d7cd47005096a292a797d2e02ce29e8d8",
   "000463186d471107324c67faecb5c85e9f06521a"
  ]
 },
 "3.5.1": {
  "meta": {
   "description": "Cryptographic library",
   "homepage": "http://www.lysator.liu.se/~nisse/nettle/",
   "license": {
    "fullName": "GNU General Public License v2.0 or later",
    "shortName": "gpl2Plus",
    "spdxId": "GPL-2.0-or-later",
    "url": "http://spdx.org/licenses/GPL-2.0-or-later.html"
   },
   "long_description": "Nettle is a cryptographic library that is designed to fit\neasily in more or less any context: In crypto toolkits for\nobject-oriented languages (C++, Python, Pike, ...), in\napplications like LSH or GNUPG, or even in kernel space.  In\nmost contexts, you need more than the basic cryptographic\nalgorithms, you also need some way to keep track of available\nalgorithms, their properties and variants.  You often have\nsome algorithm selection process, often dictated by a protocol\nyou want to implement.\n\nAnd as the requirements of applications differ in subtle and\nnot so subtle ways, an API that fits one application well can\nbe a pain to use in a different context.  And that is why\nthere are so many different cryptographic libraries around.\n\nNettle tries to avoid this problem by doing one thing, the\nlow-level crypto stuff, and providing a simple but general\ninterface to it.  In particular, Nettle doesn't do algorithm\nselection.  It doesn't do memory allocation. It doesn't do any\nI/O.\n",
   "maintainers": [],
   "name": "nettle",
   "platforms": [
    "aarch64-linux",
    "armv5tel-linux",
    "armv6l-linux",
    "armv7a-linux",
    "armv7l-linux",
    "mipsel-linux",
    "i686-cygwin",
    "i686-freebsd",
    "i686-linux",
    "i686-netbsd",
    "i686-openbsd",
    "x86_64-cygwin",
    "x86_64-freebsd",
    "x86_64-linux",
    "x86_64-netbsd",
    "x86_64-openbsd",
    "x86_64-solaris",
    "x86_64-darwin",
    "i686-darwin",
    "aarch64-darwin",
    "armv7a-darwin",
    "x86_64-windows",
    "i686-windows",
    "wasm64-wasi",
    "wasm32-wasi",
    "powerpc64le-linux",
    "riscv32-linux",
    "riscv64-linux",
    "arm-none",
    "armv6l-none",
    "aarch64-none",
    "avr-none",
    "i686-none",
    "x86_64-none",
    "powerpc-none",
    "msp430-none",
    "riscv64-none",
    "riscv32-none",
    "vc4-none",
    "js-ghcjs"
   ],
   "position": "pkgs/development/libraries/nettle/generic.nix:29"
  },
  "revs": [
   "0005b13fc5f3c4c3bf3d0bb5f7ea4330b36c0bcc",
   "0023aaef48e31444eeb22fc7c982c43b9782eef9"
  ]
 },
 "3.6": {
  "meta": {
   "description": "Cryptographic library",
   "homepage": "http://www.lysator.liu.se/~nisse/nettle/",
   "license": {
    "fullName": "GNU General Public License v2.0 or later",
    "shortName": "gpl2Plus",
    "spdxId": "GPL-2.0-or-later",
    "url": "https://spdx.org/licenses/GPL-2.0-or-later.html"
   },
   "long_description": "Nettle is a cryptographic library that is designed to fit\neasily in more or less any context: In crypto toolkits for\nobject-oriented languages (C++, Python, Pike, ...), in\napplications like LSH or GNUPG, or even in kernel space.  In\nmost contexts, you need more than the basic cryptographic\nalgorithms, you also need some way to keep track of available\nalgorithms, their properties and variants.  You often have\nsome algorithm selection process, often dictated by a protocol\nyou want to implement.\n\nAnd as the requirements of applications differ in subtle and\nnot so subtle ways, an API that fits one application well can\nbe a pain to use in a different context.  And that is why\nthere are so many different cryptographic libraries around.\n\nNettle tries to avoid this problem by doing one thing, the\nlow-level crypto stuff, and providing a simple but general\ninterface to it.  In particular, Nettle doesn't do algorithm\nselection.  It doesn't do memory allocation. It doesn't do any\nI/O.\n",
   "maintainers": [],
   "name": "nettle",
   "platforms": [
    "aarch64-linux",
    "armv5tel-linux",
    "armv6l-linux",
    "armv7a-linux",
    "armv7l-linux",
    "mipsel-linux",
    "i686-cygwin",
    "i686-freebsd",
    "i686-linux",
    "i686-netbsd",
    "i686-openbsd",
    "x86_64-cygwin",
    "x86_64-freebsd",
    "x86_64-linux",
    "x86_64-netbsd",
    "x86_64-openbsd",
    "x86_64-solaris",
    "x86_64-darwin",
    "i686-darwin",
    "aarch64-darwin",
    "armv7a-darwin",
    "x86_64-windows",
    "i686-windows",
    "wasm64-wasi",
    "wasm32-wasi",
    "powerpc64le-linux",
    "riscv32-linux",
    "riscv64-linux",
    "arm-none",
    "armv6l-none",
    "aarch64-none",
    "avr-none",
    "i686-none",
    "x86_64-none",
    "powerpc-none",
    "msp430-none",
    "riscv64-none",
    "riscv32-none",
    "vc4-none",
    "js-ghcjs",
    "aarch64-genode",
    "x86_64-genode"
   ],
   "position": "pkgs/development/libraries/nettle/generic.nix:29"
  },
  "revs": [
   "00022fbeda385d7b6ae2eee44f07eecfc6d92015",
   "001334b47c6cdfc35e94805380484e75004cdbf5"
  ]
 }
}