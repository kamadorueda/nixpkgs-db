{
 "1.3.1": {
  "meta": {
   "description": "GNU Prolog, a free Prolog compiler with constraint solving over finite domains",
   "homepage": "http://www.gnu.org/software/gprolog/",
   "license": "GPLv2+",
   "long_description": "GNU Prolog is a free Prolog compiler with constraint solving\nover finite domains developed by Daniel Diaz.\n\nGNU Prolog accepts Prolog+constraint programs and produces\nnative binaries (like gcc does from a C source).  The obtained\nexecutable is then stand-alone.  The size of this executable can\nbe quite small since GNU Prolog can avoid to link the code of\nmost unused built-in predicates.  The performances of GNU Prolog\nare very encouraging (comparable to commercial systems).\n\nBeside the native-code compilation, GNU Prolog offers a\nclassical interactive interpreter (top-level) with a debugger.\n\nThe Prolog part conforms to the ISO standard for Prolog with\nmany extensions very useful in practice (global variables, OS\ninterface, sockets,...).\n\nGNU Prolog also includes an efficient constraint solver over\nFinite Domains (FD).  This opens contraint logic programming to\nthe user combining the power of constraint programming to the\ndeclarativity of logic programming.\n",
   "maintainers": [],
   "name": "gprolog",
   "platforms": null,
   "position": ""
  },
  "revs": [
   "0003f76f9b29d92ce7acb8e3f35f3805c91687d6",
   "05a530fd10d7b846a47e8bc4b9a4d21fef20e3e8"
  ]
 },
 "1.4.0": {
  "meta": {
   "description": "GNU Prolog, a free Prolog compiler with constraint solving over finite domains",
   "homepage": "http://www.gnu.org/software/gprolog/",
   "license": "GPLv2+",
   "long_description": "GNU Prolog is a free Prolog compiler with constraint solving\nover finite domains developed by Daniel Diaz.\n\nGNU Prolog accepts Prolog+constraint programs and produces\nnative binaries (like gcc does from a C source).  The obtained\nexecutable is then stand-alone.  The size of this executable can\nbe quite small since GNU Prolog can avoid to link the code of\nmost unused built-in predicates.  The performances of GNU Prolog\nare very encouraging (comparable to commercial systems).\n\nBeside the native-code compilation, GNU Prolog offers a\nclassical interactive interpreter (top-level) with a debugger.\n\nThe Prolog part conforms to the ISO standard for Prolog with\nmany extensions very useful in practice (global variables, OS\ninterface, sockets,...).\n\nGNU Prolog also includes an efficient constraint solver over\nFinite Domains (FD).  This opens contraint logic programming to\nthe user combining the power of constraint programming to the\ndeclarativity of logic programming.\n",
   "maintainers": [
    "Peter Simons <simons@cryp.to>"
   ],
   "name": "gprolog",
   "platforms": [
    "i686-linux",
    "x86_64-linux",
    "powerpc-linux",
    "armv5tel-linux",
    "mips64el-linux"
   ],
   "position": ""
  },
  "revs": [
   "000051b196b82d30d1008c8999502c484ea5bd7d",
   "049c38a9a292376d9c99628015d1adc609ac347e"
  ]
 },
 "1.4.1": {
  "meta": {
   "description": "GNU Prolog, a free Prolog compiler with constraint solving over finite domains",
   "homepage": "http://www.gnu.org/software/gprolog/",
   "license": "GPLv2+",
   "long_description": "GNU Prolog is a free Prolog compiler with constraint solving\nover finite domains developed by Daniel Diaz.\n\nGNU Prolog accepts Prolog+constraint programs and produces\nnative binaries (like gcc does from a C source).  The obtained\nexecutable is then stand-alone.  The size of this executable can\nbe quite small since GNU Prolog can avoid to link the code of\nmost unused built-in predicates.  The performances of GNU Prolog\nare very encouraging (comparable to commercial systems).\n\nBeside the native-code compilation, GNU Prolog offers a\nclassical interactive interpreter (top-level) with a debugger.\n\nThe Prolog part conforms to the ISO standard for Prolog with\nmany extensions very useful in practice (global variables, OS\ninterface, sockets,...).\n\nGNU Prolog also includes an efficient constraint solver over\nFinite Domains (FD).  This opens contraint logic programming to\nthe user combining the power of constraint programming to the\ndeclarativity of logic programming.\n",
   "maintainers": [
    "Peter Simons <simons@cryp.to>"
   ],
   "name": "gprolog",
   "platforms": [
    "i686-linux",
    "x86_64-linux",
    "powerpc-linux",
    "armv5tel-linux",
    "armv7l-linux",
    "mips64el-linux"
   ],
   "position": ""
  },
  "revs": [
   "000fddd10e079f147769f686e5661bd6d7c1db5a",
   "0c8372d9c7374eafc035718749d81b8e8317f62e"
  ]
 },
 "1.4.4": {
  "meta": {
   "description": "GNU Prolog, a free Prolog compiler with constraint solving over finite domains",
   "homepage": "https://www.gnu.org/software/gprolog/",
   "license": {
    "fullName": "GNU Lesser General Public License v3.0 or later",
    "shortName": "lgpl3Plus",
    "spdxId": "LGPL-3.0+",
    "url": "http://spdx.org/licenses/LGPL-3.0+.html"
   },
   "long_description": "GNU Prolog is a free Prolog compiler with constraint solving\nover finite domains developed by Daniel Diaz.\n\nGNU Prolog accepts Prolog+constraint programs and produces\nnative binaries (like gcc does from a C source).  The obtained\nexecutable is then stand-alone.  The size of this executable can\nbe quite small since GNU Prolog can avoid to link the code of\nmost unused built-in predicates.  The performances of GNU Prolog\nare very encouraging (comparable to commercial systems).\n\nBeside the native-code compilation, GNU Prolog offers a\nclassical interactive interpreter (top-level) with a debugger.\n\nThe Prolog part conforms to the ISO standard for Prolog with\nmany extensions very useful in practice (global variables, OS\ninterface, sockets,...).\n\nGNU Prolog also includes an efficient constraint solver over\nFinite Domains (FD).  This opens contraint logic programming to\nthe user combining the power of constraint programming to the\ndeclarativity of logic programming.\n",
   "maintainers": [
    {
     "email": "simons@cryp.to",
     "github": "peti",
     "name": "Peter Simons"
    }
   ],
   "name": "gprolog",
   "platforms": [
    {
     "abi": {
      "_type": "abi",
      "name": "gnu"
     },
     "kernel": {
      "_type": "kernel",
      "execFormat": {
       "_type": "exec-format",
       "name": "elf"
      },
      "families": {},
      "name": "linux"
     }
    },
    {
     "abi": {
      "_type": "abi",
      "float": "soft",
      "name": "gnueabi"
     },
     "kernel": {
      "_type": "kernel",
      "execFormat": {
       "_type": "exec-format",
       "name": "elf"
      },
      "families": {},
      "name": "linux"
     }
    },
    {
     "abi": {
      "_type": "abi",
      "float": "hard",
      "name": "gnueabihf"
     },
     "kernel": {
      "_type": "kernel",
      "execFormat": {
       "_type": "exec-format",
       "name": "elf"
      },
      "families": {},
      "name": "linux"
     }
    },
    {
     "kernel": {
      "_type": "kernel",
      "execFormat": {
       "_type": "exec-format",
       "name": "elf"
      },
      "families": {},
      "name": "linux"
     }
    }
   ],
   "position": "pkgs/development/compilers/gprolog/default.nix:38"
  },
  "revs": [
   "00005ce0bdbc3c13804adc9a7fd71a02cc0b8db2",
   "03f9fa3521d3e0cf8f21f2d5e55af4b404cbf1a2"
  ]
 },
 "1.4.5": {
  "meta": {
   "description": "GNU Prolog, a free Prolog compiler with constraint solving over finite domains",
   "homepage": "https://www.gnu.org/software/gprolog/",
   "license": {
    "fullName": "GNU Lesser General Public License v3.0 or later",
    "shortName": "lgpl3Plus",
    "spdxId": "LGPL-3.0-or-later",
    "url": "http://spdx.org/licenses/LGPL-3.0-or-later.html"
   },
   "long_description": "GNU Prolog is a free Prolog compiler with constraint solving\nover finite domains developed by Daniel Diaz.\n\nGNU Prolog accepts Prolog+constraint programs and produces\nnative binaries (like gcc does from a C source).  The obtained\nexecutable is then stand-alone.  The size of this executable can\nbe quite small since GNU Prolog can avoid to link the code of\nmost unused built-in predicates.  The performances of GNU Prolog\nare very encouraging (comparable to commercial systems).\n\nBeside the native-code compilation, GNU Prolog offers a\nclassical interactive interpreter (top-level) with a debugger.\n\nThe Prolog part conforms to the ISO standard for Prolog with\nmany extensions very useful in practice (global variables, OS\ninterface, sockets,...).\n\nGNU Prolog also includes an efficient constraint solver over\nFinite Domains (FD).  This opens contraint logic programming to\nthe user combining the power of constraint programming to the\ndeclarativity of logic programming.\n",
   "maintainers": [
    {
     "email": "simons@cryp.to",
     "github": "peti",
     "name": "Peter Simons"
    }
   ],
   "name": "gprolog",
   "platforms": [
    {
     "abi": {
      "_type": "abi",
      "name": "gnu"
     },
     "kernel": {
      "_type": "kernel",
      "execFormat": {
       "_type": "exec-format",
       "name": "elf"
      },
      "families": {},
      "name": "linux"
     }
    },
    {
     "abi": {
      "_type": "abi",
      "float": "soft",
      "name": "gnueabi"
     },
     "kernel": {
      "_type": "kernel",
      "execFormat": {
       "_type": "exec-format",
       "name": "elf"
      },
      "families": {},
      "name": "linux"
     }
    },
    {
     "abi": {
      "_type": "abi",
      "float": "hard",
      "name": "gnueabihf"
     },
     "kernel": {
      "_type": "kernel",
      "execFormat": {
       "_type": "exec-format",
       "name": "elf"
      },
      "families": {},
      "name": "linux"
     }
    },
    {
     "kernel": {
      "_type": "kernel",
      "execFormat": {
       "_type": "exec-format",
       "name": "elf"
      },
      "families": {},
      "name": "linux"
     }
    }
   ],
   "position": "pkgs/development/compilers/gprolog/default.nix:38"
  },
  "revs": [
   "0000a86d7cd47005096a292a797d2e02ce29e8d8",
   "03cb3521f823df150e3a09488a3d9f080bfd480e"
  ]
 }
}