{
 "0.9.24": {
  "meta": {
   "description": "TinyCC, a small, fast, and embeddable C compiler and interpreter",
   "homepage": "http://www.tinycc.org/",
   "license": "LGPLv2+",
   "long_description": "",
   "maintainers": [],
   "name": "tinycc",
   "platforms": null,
   "position": ""
  },
  "revs": [
   "000c2c51fdfffcd0b0cc91011d53080bf1f6513c",
   "02bd68fa15861f28b6f65db7b98873c4c5b9e644"
  ]
 },
 "0.9.25": {
  "meta": {
   "description": "TinyCC, a small, fast, and embeddable C compiler and interpreter",
   "homepage": "http://www.tinycc.org/",
   "license": "LGPLv2+",
   "long_description": "TinyCC (aka TCC) is a small but hyper fast C compiler.  Unlike\n          other C compilers, it is meant to be self-sufficient: you do not\n          need an external assembler or linker because TCC does that for\n          you.\n\n          TCC compiles so fast that even for big projects Makefiles may not\n          be necessary.\n\n          TCC not only supports ANSI C, but also most of the new ISO C99\n          standard and many GNU C extensions.\n\n          TCC can also be used to make C scripts, i.e. pieces of C source\n          that you run as a Perl or Python script.  Compilation is so fast\n          that your script will be as fast as if it was an executable.\n\n          TCC can also automatically generate memory and bound checks while\n          allowing all C pointers operations.  TCC can do these checks even\n          if non patched libraries are used.\n\n          With libtcc, you can use TCC as a backend for dynamic code\n          generation.\n",
   "maintainers": [
    "Ludovic Court\u00e8s <ludo@gnu.org>"
   ],
   "name": "tinycc",
   "platforms": [
    "i686-linux",
    "x86_64-linux",
    "powerpc-linux",
    "armv5tel-linux",
    "mips64el-linux",
    "i686-darwin",
    "powerpc-darwin",
    "x86_64-darwin",
    "i686-freebsd",
    "x86_64-freebsd",
    "powerpc-freebsd",
    "i686-openbsd",
    "x86_64-openbsd"
   ],
   "position": ""
  },
  "revs": [
   "000051b196b82d30d1008c8999502c484ea5bd7d",
   "049c38a9a292376d9c99628015d1adc609ac347e"
  ]
 },
 "0.9.26": {
  "meta": {
   "description": "Small, fast, and embeddable C compiler and interpreter",
   "homepage": "http://www.tinycc.org/",
   "license": {
    "fullName": "GNU Library General Public License v2 or later",
    "shortName": "lgpl2Plus",
    "spdxId": "LGPL-2.0+",
    "url": "http://spdx.org/licenses/LGPL-2.0+"
   },
   "long_description": "TinyCC (aka TCC) is a small but hyper fast C compiler.  Unlike\n        other C compilers, it is meant to be self-sufficient: you do not\n        need an external assembler or linker because TCC does that for\n        you.\n\n        TCC compiles so fast that even for big projects Makefiles may not\n        be necessary.\n\n        TCC not only supports ANSI C, but also most of the new ISO C99\n        standard and many GNU C extensions.\n\n        TCC can also be used to make C scripts, i.e. pieces of C source\n        that you run as a Perl or Python script.  Compilation is so fast\n        that your script will be as fast as if it was an executable.\n\n        TCC can also automatically generate memory and bound checks while\n        allowing all C pointers operations.  TCC can do these checks even\n        if non patched libraries are used.\n\n        With libtcc, you can use TCC as a backend for dynamic code\n        generation.\n",
   "maintainers": [],
   "name": "tcc",
   "platforms": [
    "i686-linux",
    "x86_64-linux",
    "armv5tel-linux",
    "armv6l-linux",
    "armv7l-linux",
    "mips64el-linux",
    "x86_64-darwin",
    "i686-freebsd",
    "x86_64-freebsd",
    "i686-openbsd",
    "x86_64-openbsd"
   ],
   "position": "pkgs/development/compilers/tinycc/default.nix:31"
  },
  "revs": [
   "000162daed5e6a854d1e034409002aee80e6d8ac",
   "037f300184dd2a52399f9b75421e2374d36ab39a"
  ]
 },
 "0.9.27": {
  "meta": {
   "description": "Small, fast, and embeddable C compiler and interpreter",
   "homepage": "http://www.tinycc.org/",
   "license": {
    "fullName": "MIT License",
    "shortName": "mit",
    "spdxId": "MIT",
    "url": "http://spdx.org/licenses/MIT.html"
   },
   "long_description": "TinyCC (aka TCC) is a small but hyper fast C compiler.  Unlike\nother C compilers, it is meant to be self-sufficient: you do not\nneed an external assembler or linker because TCC does that for\nyou.\n\nTCC compiles so fast that even for big projects Makefiles may not\nbe necessary.\n\nTCC not only supports ANSI C, but also most of the new ISO C99\nstandard and many GNU C extensions.\n\nTCC can also be used to make C scripts, i.e. pieces of C source\nthat you run as a Perl or Python script.  Compilation is so fast\nthat your script will be as fast as if it was an executable.\n\nTCC can also automatically generate memory and bound checks while\nallowing all C pointers operations.  TCC can do these checks even\nif non patched libraries are used.\n\nWith libtcc, you can use TCC as a backend for dynamic code\ngeneration.\n",
   "maintainers": [
    {
     "email": "joachifm@fastmail.fm",
     "github": "joachifm",
     "name": "Joachim Fasting"
    }
   ],
   "name": "tcc",
   "platforms": [
    "x86_64-linux"
   ],
   "position": "pkgs/development/compilers/tinycc/default.nix:41"
  },
  "revs": [
   "00005ce0bdbc3c13804adc9a7fd71a02cc0b8db2",
   "0672de5b894a15e97da9cf82bf3052bde7919691"
  ]
 },
 "0.9.27pre-20160328": {
  "meta": {
   "description": "Small, fast, and embeddable C compiler and interpreter",
   "homepage": "http://www.tinycc.org/",
   "license": {
    "fullName": "GNU Library General Public License v2 or later",
    "shortName": "lgpl2Plus",
    "spdxId": "LGPL-2.0+",
    "url": "http://spdx.org/licenses/LGPL-2.0+"
   },
   "long_description": "TinyCC (aka TCC) is a small but hyper fast C compiler.  Unlike\n        other C compilers, it is meant to be self-sufficient: you do not\n        need an external assembler or linker because TCC does that for\n        you.\n\n        TCC compiles so fast that even for big projects Makefiles may not\n        be necessary.\n\n        TCC not only supports ANSI C, but also most of the new ISO C99\n        standard and many GNU C extensions.\n\n        TCC can also be used to make C scripts, i.e. pieces of C source\n        that you run as a Perl or Python script.  Compilation is so fast\n        that your script will be as fast as if it was an executable.\n\n        TCC can also automatically generate memory and bound checks while\n        allowing all C pointers operations.  TCC can do these checks even\n        if non patched libraries are used.\n\n        With libtcc, you can use TCC as a backend for dynamic code\n        generation.\n",
   "maintainers": [],
   "name": "tcc-git",
   "platforms": [
    "i686-linux",
    "x86_64-linux",
    "armv5tel-linux",
    "armv6l-linux",
    "armv7l-linux",
    "mips64el-linux",
    "x86_64-darwin",
    "i686-freebsd",
    "x86_64-freebsd",
    "i686-openbsd",
    "x86_64-openbsd",
    "i686-netbsd",
    "x86_64-netbsd",
    "x86_64-solaris"
   ],
   "position": "pkgs/development/compilers/tinycc/default.nix:37"
  },
  "revs": [
   "0000d4029e264262dcf45a822ccf3b48bcacf209",
   "0086c6d4014851f2d1a8a99338faeed92cbf9e51"
  ]
 },
 "0.9.27pre-20160525": {
  "meta": {
   "description": "Small, fast, and embeddable C compiler and interpreter",
   "homepage": "http://www.tinycc.org/",
   "license": {
    "fullName": "GNU Library General Public License v2 or later",
    "shortName": "lgpl2Plus",
    "spdxId": "LGPL-2.0+",
    "url": "http://spdx.org/licenses/LGPL-2.0+"
   },
   "long_description": "TinyCC (aka TCC) is a small but hyper fast C compiler.  Unlike\nother C compilers, it is meant to be self-sufficient: you do not\nneed an external assembler or linker because TCC does that for\nyou.\n\nTCC compiles so fast that even for big projects Makefiles may not\nbe necessary.\n\nTCC not only supports ANSI C, but also most of the new ISO C99\nstandard and many GNU C extensions.\n\nTCC can also be used to make C scripts, i.e. pieces of C source\nthat you run as a Perl or Python script.  Compilation is so fast\nthat your script will be as fast as if it was an executable.\n\nTCC can also automatically generate memory and bound checks while\nallowing all C pointers operations.  TCC can do these checks even\nif non patched libraries are used.\n\nWith libtcc, you can use TCC as a backend for dynamic code\ngeneration.\n",
   "maintainers": [
    "Joachim Fasting <joachifm@fastmail.fm>"
   ],
   "name": "tcc",
   "platforms": [
    "i686-linux",
    "x86_64-linux",
    "armv5tel-linux",
    "armv6l-linux",
    "armv7l-linux",
    "mips64el-linux",
    "x86_64-darwin",
    "i686-freebsd",
    "x86_64-freebsd",
    "i686-openbsd",
    "x86_64-openbsd",
    "i686-netbsd",
    "x86_64-netbsd",
    "x86_64-solaris"
   ],
   "position": "pkgs/development/compilers/tinycc/default.nix:49"
  },
  "revs": [
   "000fb9be33528f867e2355ddedde0836ba7f7a3a",
   "044ceae2806480555a44c91c386546cffb46ba74"
  ]
 },
 "0.9.27pre-20170108": {
  "meta": {
   "description": "Small, fast, and embeddable C compiler and interpreter",
   "homepage": "http://www.tinycc.org/",
   "license": {
    "fullName": "GNU Library General Public License v2 or later",
    "shortName": "lgpl2Plus",
    "spdxId": "LGPL-2.0+",
    "url": "http://spdx.org/licenses/LGPL-2.0+"
   },
   "long_description": "TinyCC (aka TCC) is a small but hyper fast C compiler.  Unlike\nother C compilers, it is meant to be self-sufficient: you do not\nneed an external assembler or linker because TCC does that for\nyou.\n\nTCC compiles so fast that even for big projects Makefiles may not\nbe necessary.\n\nTCC not only supports ANSI C, but also most of the new ISO C99\nstandard and many GNU C extensions.\n\nTCC can also be used to make C scripts, i.e. pieces of C source\nthat you run as a Perl or Python script.  Compilation is so fast\nthat your script will be as fast as if it was an executable.\n\nTCC can also automatically generate memory and bound checks while\nallowing all C pointers operations.  TCC can do these checks even\nif non patched libraries are used.\n\nWith libtcc, you can use TCC as a backend for dynamic code\ngeneration.\n",
   "maintainers": [
    "Joachim Fasting <joachifm@fastmail.fm>"
   ],
   "name": "tcc",
   "platforms": [
    "i686-linux",
    "x86_64-linux",
    "armv5tel-linux",
    "armv6l-linux",
    "armv7l-linux",
    "aarch64-linux",
    "mips64el-linux",
    "x86_64-darwin",
    "i686-freebsd",
    "x86_64-freebsd",
    "i686-openbsd",
    "x86_64-openbsd",
    "i686-netbsd",
    "x86_64-netbsd",
    "x86_64-solaris"
   ],
   "position": "pkgs/development/compilers/tinycc/default.nix:47"
  },
  "revs": [
   "00105162f413ea8e8a419da0fc5b556e3737e82f",
   "0481a33d214b3129970d0951e2fe82548c4d3d04"
  ]
 },
 "0.9.27pre-20170220": {
  "meta": {
   "description": "Small, fast, and embeddable C compiler and interpreter",
   "homepage": "http://www.tinycc.org/",
   "license": {
    "fullName": "MIT License",
    "shortName": "mit",
    "spdxId": "MIT",
    "url": "http://spdx.org/licenses/MIT"
   },
   "long_description": "TinyCC (aka TCC) is a small but hyper fast C compiler.  Unlike\nother C compilers, it is meant to be self-sufficient: you do not\nneed an external assembler or linker because TCC does that for\nyou.\n\nTCC compiles so fast that even for big projects Makefiles may not\nbe necessary.\n\nTCC not only supports ANSI C, but also most of the new ISO C99\nstandard and many GNU C extensions.\n\nTCC can also be used to make C scripts, i.e. pieces of C source\nthat you run as a Perl or Python script.  Compilation is so fast\nthat your script will be as fast as if it was an executable.\n\nTCC can also automatically generate memory and bound checks while\nallowing all C pointers operations.  TCC can do these checks even\nif non patched libraries are used.\n\nWith libtcc, you can use TCC as a backend for dynamic code\ngeneration.\n",
   "maintainers": [
    "Joachim Fasting <joachifm@fastmail.fm>"
   ],
   "name": "tcc",
   "platforms": [
    "x86_64-linux"
   ],
   "position": "pkgs/development/compilers/tinycc/default.nix:47"
  },
  "revs": [
   "00f16e3d7c4239bcb4c0b55302e4956adf69d691",
   "03938aa359bcf812f7bb8f4c7a6f4bc2d84034a4"
  ]
 },
 "0.9.27pre-20170225": {
  "meta": {
   "description": "Small, fast, and embeddable C compiler and interpreter",
   "homepage": "http://www.tinycc.org/",
   "license": {
    "fullName": "MIT License",
    "shortName": "mit",
    "spdxId": "MIT",
    "url": "http://spdx.org/licenses/MIT"
   },
   "long_description": "TinyCC (aka TCC) is a small but hyper fast C compiler.  Unlike\nother C compilers, it is meant to be self-sufficient: you do not\nneed an external assembler or linker because TCC does that for\nyou.\n\nTCC compiles so fast that even for big projects Makefiles may not\nbe necessary.\n\nTCC not only supports ANSI C, but also most of the new ISO C99\nstandard and many GNU C extensions.\n\nTCC can also be used to make C scripts, i.e. pieces of C source\nthat you run as a Perl or Python script.  Compilation is so fast\nthat your script will be as fast as if it was an executable.\n\nTCC can also automatically generate memory and bound checks while\nallowing all C pointers operations.  TCC can do these checks even\nif non patched libraries are used.\n\nWith libtcc, you can use TCC as a backend for dynamic code\ngeneration.\n",
   "maintainers": [
    "Joachim Fasting <joachifm@fastmail.fm>"
   ],
   "name": "tcc",
   "platforms": [
    "x86_64-linux"
   ],
   "position": "pkgs/development/compilers/tinycc/default.nix:47"
  },
  "revs": [
   "0018cd5a2ddd858f78cffd0bd8a2412d5b507088",
   "05bc7686b31c92cecf97ab8ac674d76ca2d8176b"
  ]
 },
 "0.9.27pre-20170527": {
  "meta": {
   "description": "Small, fast, and embeddable C compiler and interpreter",
   "homepage": "http://www.tinycc.org/",
   "license": {
    "fullName": "MIT License",
    "shortName": "mit",
    "spdxId": "MIT",
    "url": "http://spdx.org/licenses/MIT"
   },
   "long_description": "TinyCC (aka TCC) is a small but hyper fast C compiler.  Unlike\nother C compilers, it is meant to be self-sufficient: you do not\nneed an external assembler or linker because TCC does that for\nyou.\n\nTCC compiles so fast that even for big projects Makefiles may not\nbe necessary.\n\nTCC not only supports ANSI C, but also most of the new ISO C99\nstandard and many GNU C extensions.\n\nTCC can also be used to make C scripts, i.e. pieces of C source\nthat you run as a Perl or Python script.  Compilation is so fast\nthat your script will be as fast as if it was an executable.\n\nTCC can also automatically generate memory and bound checks while\nallowing all C pointers operations.  TCC can do these checks even\nif non patched libraries are used.\n\nWith libtcc, you can use TCC as a backend for dynamic code\ngeneration.\n",
   "maintainers": [
    "Joachim Fasting <joachifm@fastmail.fm>"
   ],
   "name": "tcc",
   "platforms": [
    "x86_64-linux"
   ],
   "position": "pkgs/development/compilers/tinycc/default.nix:47"
  },
  "revs": [
   "0011f9065a1ad1da4db67bec8d535d91b0a78fba",
   "05126bc8503a37bfd2fe80867eb5b0bea287c633"
  ]
 },
 "0.9.27pre-20170710": {
  "meta": {
   "description": "Small, fast, and embeddable C compiler and interpreter",
   "homepage": "http://www.tinycc.org/",
   "license": {
    "fullName": "MIT License",
    "shortName": "mit",
    "spdxId": "MIT",
    "url": "http://spdx.org/licenses/MIT"
   },
   "long_description": "TinyCC (aka TCC) is a small but hyper fast C compiler.  Unlike\nother C compilers, it is meant to be self-sufficient: you do not\nneed an external assembler or linker because TCC does that for\nyou.\n\nTCC compiles so fast that even for big projects Makefiles may not\nbe necessary.\n\nTCC not only supports ANSI C, but also most of the new ISO C99\nstandard and many GNU C extensions.\n\nTCC can also be used to make C scripts, i.e. pieces of C source\nthat you run as a Perl or Python script.  Compilation is so fast\nthat your script will be as fast as if it was an executable.\n\nTCC can also automatically generate memory and bound checks while\nallowing all C pointers operations.  TCC can do these checks even\nif non patched libraries are used.\n\nWith libtcc, you can use TCC as a backend for dynamic code\ngeneration.\n",
   "maintainers": [
    "Joachim Fasting <joachifm@fastmail.fm>"
   ],
   "name": "tcc",
   "platforms": [
    "x86_64-linux"
   ],
   "position": "pkgs/development/compilers/tinycc/default.nix:47"
  },
  "revs": [
   "02ad1fd89b8cece156a05885fbf21f5cadeb36a5",
   "0582995d67e6434fc3aca934fa124af41495bf30"
  ]
 },
 "0.9.27pre-20170821": {
  "meta": {
   "description": "Small, fast, and embeddable C compiler and interpreter",
   "homepage": "http://www.tinycc.org/",
   "license": {
    "fullName": "MIT License",
    "shortName": "mit",
    "spdxId": "MIT",
    "url": "http://spdx.org/licenses/MIT"
   },
   "long_description": "TinyCC (aka TCC) is a small but hyper fast C compiler.  Unlike\nother C compilers, it is meant to be self-sufficient: you do not\nneed an external assembler or linker because TCC does that for\nyou.\n\nTCC compiles so fast that even for big projects Makefiles may not\nbe necessary.\n\nTCC not only supports ANSI C, but also most of the new ISO C99\nstandard and many GNU C extensions.\n\nTCC can also be used to make C scripts, i.e. pieces of C source\nthat you run as a Perl or Python script.  Compilation is so fast\nthat your script will be as fast as if it was an executable.\n\nTCC can also automatically generate memory and bound checks while\nallowing all C pointers operations.  TCC can do these checks even\nif non patched libraries are used.\n\nWith libtcc, you can use TCC as a backend for dynamic code\ngeneration.\n",
   "maintainers": [
    "Joachim Fasting <joachifm@fastmail.fm>"
   ],
   "name": "tcc",
   "platforms": [
    "x86_64-linux"
   ],
   "position": "pkgs/development/compilers/tinycc/default.nix:47"
  },
  "revs": [
   "0016d925e42c28df8666293bb38a440b10101fd8",
   "00364fa6bd5d0172fd502acd7cc9e5e32ef59095"
  ]
 },
 "0.9.27pre-20170911": {
  "meta": {
   "description": "Small, fast, and embeddable C compiler and interpreter",
   "homepage": "http://www.tinycc.org/",
   "license": {
    "fullName": "MIT License",
    "shortName": "mit",
    "spdxId": "MIT",
    "url": "http://spdx.org/licenses/MIT"
   },
   "long_description": "TinyCC (aka TCC) is a small but hyper fast C compiler.  Unlike\nother C compilers, it is meant to be self-sufficient: you do not\nneed an external assembler or linker because TCC does that for\nyou.\n\nTCC compiles so fast that even for big projects Makefiles may not\nbe necessary.\n\nTCC not only supports ANSI C, but also most of the new ISO C99\nstandard and many GNU C extensions.\n\nTCC can also be used to make C scripts, i.e. pieces of C source\nthat you run as a Perl or Python script.  Compilation is so fast\nthat your script will be as fast as if it was an executable.\n\nTCC can also automatically generate memory and bound checks while\nallowing all C pointers operations.  TCC can do these checks even\nif non patched libraries are used.\n\nWith libtcc, you can use TCC as a backend for dynamic code\ngeneration.\n",
   "maintainers": [
    "Joachim Fasting <joachifm@fastmail.fm>"
   ],
   "name": "tcc",
   "platforms": [
    "x86_64-linux"
   ],
   "position": "pkgs/development/compilers/tinycc/default.nix:47"
  },
  "revs": [
   "00422b227968b698c3f109c46b8cd1a4c8590b4e",
   "0208f5422971782898bbbfa7647c128ee6547228"
  ]
 },
 "0.9.27pre-20170924": {
  "meta": {
   "description": "Small, fast, and embeddable C compiler and interpreter",
   "homepage": "http://www.tinycc.org/",
   "license": {
    "fullName": "MIT License",
    "shortName": "mit",
    "spdxId": "MIT",
    "url": "http://spdx.org/licenses/MIT"
   },
   "long_description": "TinyCC (aka TCC) is a small but hyper fast C compiler.  Unlike\nother C compilers, it is meant to be self-sufficient: you do not\nneed an external assembler or linker because TCC does that for\nyou.\n\nTCC compiles so fast that even for big projects Makefiles may not\nbe necessary.\n\nTCC not only supports ANSI C, but also most of the new ISO C99\nstandard and many GNU C extensions.\n\nTCC can also be used to make C scripts, i.e. pieces of C source\nthat you run as a Perl or Python script.  Compilation is so fast\nthat your script will be as fast as if it was an executable.\n\nTCC can also automatically generate memory and bound checks while\nallowing all C pointers operations.  TCC can do these checks even\nif non patched libraries are used.\n\nWith libtcc, you can use TCC as a backend for dynamic code\ngeneration.\n",
   "maintainers": [
    "Joachim Fasting <joachifm@fastmail.fm>"
   ],
   "name": "tcc",
   "platforms": [
    "x86_64-linux"
   ],
   "position": "pkgs/development/compilers/tinycc/default.nix:47"
  },
  "revs": [
   "00078afb1f6c383405fa4bef9646d575f70b092f",
   "01a664e7793158b434fefac9217ec48313b2dd45"
  ]
 },
 "0.9.27pre-20171016": {
  "meta": {
   "description": "Small, fast, and embeddable C compiler and interpreter",
   "homepage": "http://www.tinycc.org/",
   "license": {
    "fullName": "MIT License",
    "shortName": "mit",
    "spdxId": "MIT",
    "url": "http://spdx.org/licenses/MIT"
   },
   "long_description": "TinyCC (aka TCC) is a small but hyper fast C compiler.  Unlike\nother C compilers, it is meant to be self-sufficient: you do not\nneed an external assembler or linker because TCC does that for\nyou.\n\nTCC compiles so fast that even for big projects Makefiles may not\nbe necessary.\n\nTCC not only supports ANSI C, but also most of the new ISO C99\nstandard and many GNU C extensions.\n\nTCC can also be used to make C scripts, i.e. pieces of C source\nthat you run as a Perl or Python script.  Compilation is so fast\nthat your script will be as fast as if it was an executable.\n\nTCC can also automatically generate memory and bound checks while\nallowing all C pointers operations.  TCC can do these checks even\nif non patched libraries are used.\n\nWith libtcc, you can use TCC as a backend for dynamic code\ngeneration.\n",
   "maintainers": [
    "Joachim Fasting <joachifm@fastmail.fm>"
   ],
   "name": "tcc",
   "platforms": [
    "x86_64-linux"
   ],
   "position": "pkgs/development/compilers/tinycc/default.nix:47"
  },
  "revs": [
   "00056e76d0a5c1c05d7ad1064702b3d121cd1b98",
   "039cb6291de0358fe89fb455c219a0ab891060be"
  ]
 }
}